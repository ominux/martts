%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: RWratio.pdf
%%Creator: Adobe Acrobat 9.4.3
%%For: Pangpang
%%CreationDate: 2011/4/18, 2:53:46
%%BoundingBox: 0 0 333 139
%%HiResBoundingBox: 0 0 332.4001 138.2400
%%CropBox: 0 0 332.4001 138.2400
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1044 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:ModifyDate="2011-04-18T02:53:37-04:00"
   xmp:CreateDate="2011-04-18T02:09:34-04:00"
   xmp:MetadataDate="2011-04-18T02:53:37-04:00"
   xmp:CreatorTool="Acrobat PDFMaker 9.1 for Excel"
   xmpMM:DocumentID="uuid:f24c5b6a-263e-4921-8e1c-6e1825c4fab9"
   xmpMM:InstanceID="uuid:631a2c49-331c-40d8-9a6e-1c35c598027f"
   dc:format="application/pdf"
   pdf:Producer="Adobe PDF Library 9.0"
   pdfx:Company="Hewlett-Packard Company">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Pangpang</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedA 20 dict
dup /CreationDate (19990603000000) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (Gray Gamma 2.2) put
dup /ColorSpace (GRAY) put
dup /Copyright (Copyright 1999 Adobe Systems Incorporated) put
dup /ProfileID <66043AD0DE86F27B977BAB702FB1A778> put
dup /MatrixA [1 1 1] put
dup /DecodeLMN [
{{0 0.00006 0.00012 0.00018 0.00023 0.00029 0.00035 0.00041 0.00047 0.00053
0.0006 0.00064 0.0007 0.00076 0.00082 0.00095 0.00108 0.00124 0.0014 0.00159
0.00177 0.00197 0.00218 0.00241 0.00264 0.0029 0.00316 0.00342 0.00371 0.00401
0.00432 0.00464 0.00497 0.00533 0.00569 0.00606 0.00645 0.00685 0.00726 0.00769
0.00813 0.00859 0.00905 0.00954 0.01003 0.01053 0.01106 0.0116 0.01215 0.01271
0.01329 0.01387 0.01448 0.01511 0.01573 0.01639 0.01704 0.01772 0.01842 0.01912
0.01984 0.02057 0.02132 0.02208 0.02286 0.02365 0.02446 0.02528 0.02612 0.02698
0.02785 0.02872 0.02962 0.03053 0.03146 0.0324 0.03336 0.03433 0.03533 0.03633
0.03734 0.03838 0.03943 0.0405 0.04157 0.04266 0.04378 0.04491 0.04605 0.04721
0.04839 0.04958 0.05078 0.052 0.05324 0.05449 0.05576 0.05705 0.05835 0.05966
0.06101 0.06235 0.06372 0.06509 0.0665 0.0679 0.06934 0.07079 0.07225 0.07373
0.07523 0.07674 0.07826 0.0798 0.08138 0.08295 0.08455 0.08615 0.08778 0.08943
0.0911 0.09277 0.09447 0.09618 0.0979 0.09964 0.10141 0.10318 0.10498 0.1068
0.10863 0.11048 0.11234 0.11421 0.11611 0.11803 0.11995 0.1219 0.12387 0.12586
0.12786 0.12987 0.1319 0.13396 0.13602 0.13811 0.14021 0.14234 0.14447 0.14662
0.14881 0.15099 0.1532 0.15543 0.15767 0.15993 0.1622 0.16449 0.16681 0.16915
0.1715 0.17386 0.17624 0.17864 0.18106 0.18351 0.18595 0.18842 0.19092 0.19342
0.19596 0.19849 0.20105 0.20363 0.20623 0.20885 0.21147 0.21413 0.2168 0.21949
0.2222 0.22492 0.22766 0.23043 0.2332 0.236 0.2388 0.24164 0.2445 0.24736
0.25025 0.25316 0.25608 0.25902 0.26198 0.26496 0.26796 0.27097 0.27401 0.27706
0.28014 0.28322 0.28634 0.28946 0.29261 0.29577 0.29895 0.30214 0.30536 0.30861
0.31186 0.31514 0.31844 0.32175 0.32508 0.32843 0.33179 0.33518 0.3386 0.34202
0.34546 0.34893 0.35241 0.3559 0.35943 0.36297 0.36652 0.37009 0.37369 0.37731
0.38094 0.38459 0.38827 0.39196 0.39567 0.39939 0.40313 0.4069 0.41068 0.4145
0.41831 0.42216 0.42602 0.42991 0.4338 0.43772 0.44166 0.44562 0.44959 0.45359
0.4576 0.46165 0.46569 0.46976 0.47387 0.47797 0.48211}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00006 0.00012 0.00018 0.00024 0.00031 0.00037 0.00043 0.00049 0.00055
0.00061 0.00067 0.00073 0.00079 0.00085 0.00098 0.00113 0.00128 0.00145 0.00163
0.00183 0.00204 0.00226 0.0025 0.00275 0.00301 0.00327 0.00356 0.00385 0.00415
0.00449 0.00482 0.00516 0.00552 0.00591 0.00629 0.00668 0.00711 0.00754 0.00798
0.00844 0.00891 0.00938 0.00989 0.01041 0.01093 0.01147 0.01202 0.01259 0.01318
0.01378 0.01439 0.01501 0.01566 0.01631 0.01698 0.01767 0.01837 0.01909 0.01982
0.02057 0.02133 0.02211 0.0229 0.02371 0.02454 0.02538 0.02621 0.02708 0.02797
0.02887 0.02979 0.03072 0.03166 0.03262 0.0336 0.03459 0.03561 0.03664 0.03767
0.03873 0.0398 0.04089 0.04199 0.04312 0.04425 0.04541 0.04657 0.04776 0.04897
0.05019 0.05142 0.05266 0.05394 0.05522 0.05652 0.05783 0.05916 0.06052 0.06188
0.06326 0.06467 0.06609 0.06752 0.06897 0.07044 0.07192 0.07341 0.07494 0.07646
0.07802 0.07959 0.08118 0.08278 0.0844 0.08603 0.08768 0.08936 0.09105 0.09274
0.09447 0.09621 0.09796 0.09975 0.10153 0.10335 0.10518 0.10701 0.10887 0.11077
0.11266 0.11456 0.1165 0.11846 0.12042 0.12241 0.12441 0.12642 0.12847 0.13053
0.1326 0.13469 0.1368 0.13893 0.14107 0.14324 0.14542 0.14762 0.14983 0.15207
0.15433 0.15659 0.15889 0.1612 0.16352 0.16587 0.16823 0.17061 0.17301 0.17542
0.17786 0.18032 0.18279 0.18528 0.18778 0.19031 0.19286 0.19542 0.198 0.20061
0.20322 0.20586 0.20851 0.2112 0.21389 0.2166 0.21933 0.22208 0.22486 0.22763
0.23044 0.23326 0.23612 0.23897 0.24186 0.24475 0.24768 0.25061 0.25357 0.25655
0.25954 0.26256 0.26558 0.26863 0.27172 0.2748 0.27791 0.28104 0.28418 0.28734
0.29053 0.29374 0.29696 0.30021 0.30347 0.30675 0.31005 0.31337 0.3167 0.32007
0.32345 0.32683 0.33025 0.3337 0.33715 0.34063 0.34412 0.34763 0.35116 0.35471
0.35828 0.36188 0.36548 0.36912 0.37276 0.37644 0.38013 0.38384 0.38756 0.39132
0.39509 0.39887 0.40267 0.4065 0.41035 0.41422 0.4181 0.422 0.42594 0.42988
0.43384 0.43783 0.44184 0.44587 0.44991 0.45397 0.45806 0.46216 0.46628 0.47044
0.4746 0.47878 0.48299 0.48721 0.49146 0.49572 0.50001}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00005 0.00011 0.00015 0.0002 0.00024 0.00031 0.00035 0.0004 0.00046
0.0005 0.00055 0.00061 0.00066 0.0007 0.00081 0.00093 0.00105 0.00121 0.00136
0.00151 0.00168 0.00186 0.00206 0.00226 0.00247 0.0027 0.00293 0.00317 0.00343
0.00369 0.00397 0.00426 0.00456 0.00487 0.00519 0.00552 0.00586 0.00621 0.00658
0.00696 0.00734 0.00775 0.00815 0.00858 0.00902 0.00946 0.00992 0.01039 0.01086
0.01137 0.01187 0.01239 0.01292 0.01346 0.01401 0.01459 0.01515 0.01575 0.01636
0.01697 0.01759 0.01823 0.01889 0.01956 0.02023 0.02092 0.02164 0.02235 0.02307
0.02382 0.02457 0.02534 0.02612 0.02692 0.02773 0.02853 0.02937 0.03021 0.03108
0.03195 0.03284 0.03374 0.03464 0.03557 0.0365 0.03746 0.03842 0.0394 0.04039
0.0414 0.04242 0.04344 0.0445 0.04555 0.04662 0.0477 0.04881 0.04993 0.05104
0.05219 0.05335 0.05451 0.0557 0.05689 0.05811 0.05933 0.06056 0.06181 0.06308
0.06436 0.06564 0.06696 0.06828 0.06961 0.07097 0.07233 0.07372 0.0751 0.07651
0.07793 0.07936 0.08081 0.08228 0.08376 0.08525 0.08676 0.08827 0.08981 0.09137
0.09293 0.09451 0.0961 0.09772 0.09934 0.10097 0.10263 0.1043 0.10597 0.10767
0.10938 0.1111 0.11284 0.1146 0.11637 0.11815 0.11995 0.12177 0.1236 0.12544
0.12731 0.12918 0.13106 0.13297 0.13489 0.13683 0.13877 0.14073 0.14272 0.1447
0.14672 0.14874 0.15077 0.15283 0.15491 0.15699 0.15909 0.1612 0.16333 0.16548
0.16764 0.16982 0.17202 0.17421 0.17644 0.17868 0.18093 0.1832 0.18549 0.18778
0.1901 0.19243 0.19477 0.19713 0.19951 0.20191 0.2043 0.20673 0.20917 0.21163
0.2141 0.21659 0.21909 0.22161 0.22414 0.22669 0.22925 0.23183 0.23442 0.23703
0.23966 0.24231 0.24497 0.24764 0.25032 0.25304 0.25576 0.2585 0.26125 0.26403
0.2668 0.26961 0.27243 0.27526 0.27811 0.28098 0.28386 0.28676 0.28968 0.29261
0.29555 0.29851 0.30149 0.30449 0.3075 0.31052 0.31357 0.31662 0.31971 0.32279
0.3259 0.32903 0.33217 0.33533 0.33851 0.34169 0.3449 0.34812 0.35135 0.3546
0.35789 0.36117 0.36448 0.36779 0.37113 0.37449 0.37786 0.38125 0.38465 0.38807
0.3915 0.39495 0.39841 0.40191 0.4054 0.40893 0.41247}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -138.24 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 138.24 li
332.4 138.24 li
332.4 0 li
cp
clp
[1 0 0 1 -57.6 0 ]ct
50.4 -9 mo
401.04 -9 li
401.04 162.36 li
50.4 162.36 li
cp
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 colr
ef
82.44 23.16 mo
389.04 23.16 li
389.04 95.64 li
82.44 95.64 li
cp
ef
.72 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
82.44 81.24 mo
389.04 81.24 li
82.44 66.72 mo
389.04 66.72 li
82.44 52.2 mo
389.04 52.2 li
82.44 37.68 mo
389.04 37.68 li
82.44 23.16 mo
389.04 23.16 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.525 colr
@
92.76 34.08 mo
106.32 34.08 li
106.32 95.64 li
92.76 95.64 li
cp
126.72 56.52 mo
140.4 56.52 li
140.4 95.64 li
126.72 95.64 li
cp
160.8 56.52 mo
174.48 56.52 li
174.48 95.64 li
160.8 95.64 li
cp
194.88 55.08 mo
208.56 55.08 li
208.56 95.64 li
194.88 95.64 li
cp
228.96 59.4 mo
242.64 59.4 li
242.64 95.64 li
228.96 95.64 li
cp
263.04 51.48 mo
276.72 51.48 li
276.72 95.64 li
263.04 95.64 li
cp
297.12 57.24 mo
310.68 57.24 li
310.68 95.64 li
297.12 95.64 li
cp
331.2 36.96 mo
344.76 36.96 li
344.76 95.64 li
331.2 95.64 li
cp
365.28 36.96 mo
378.84 36.96 li
378.84 95.64 li
365.28 95.64 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.149 colr
f
92.76 23.16 mo
106.32 23.16 li
106.32 34.08 li
92.76 34.08 li
cp
126.72 23.16 mo
140.4 23.16 li
140.4 56.52 li
126.72 56.52 li
cp
160.8 23.16 mo
174.48 23.16 li
174.48 56.52 li
160.8 56.52 li
cp
194.88 23.16 mo
208.56 23.16 li
208.56 55.08 li
194.88 55.08 li
cp
228.96 23.16 mo
242.64 23.16 li
242.64 59.4 li
228.96 59.4 li
cp
263.04 23.16 mo
276.72 23.16 li
276.72 51.48 li
263.04 51.48 li
cp
297.12 23.16 mo
310.68 23.16 li
310.68 57.24 li
297.12 57.24 li
cp
331.2 23.16 mo
344.76 23.16 li
344.76 36.96 li
331.2 36.96 li
cp
365.28 23.16 mo
378.84 23.16 li
378.84 36.96 li
365.28 36.96 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.702 colr
f
82.44 95.64 mo
82.44 23.16 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.525 colr
@
79.32 95.64 mo
82.44 95.64 li
79.32 81.24 mo
82.44 81.24 li
79.32 66.72 mo
82.44 66.72 li
79.32 52.2 mo
82.44 52.2 li
79.32 37.68 mo
82.44 37.68 li
79.32 23.16 mo
82.44 23.16 li
@
82.44 95.64 mo
389.04 95.64 li
@
82.44 95.64 mo
82.44 98.88 li
116.52 95.64 mo
116.52 98.88 li
150.6 95.64 mo
150.6 98.88 li
184.68 95.64 mo
184.68 98.88 li
218.76 95.64 mo
218.76 98.88 li
252.84 95.64 mo
252.84 98.88 li
286.92 95.64 mo
286.92 98.88 li
321 95.64 mo
321 98.88 li
355.08 95.64 mo
355.08 98.88 li
389.04 95.64 mo
389.04 98.88 li
@
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 colr
%ADOBeginSubsetFont: PBAAAA+Calibri Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+Calibri
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e5b7d7000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966be8421810000b18c0000181268656164e625fe3e00000f640000
0036686865610dad124400000f9c00000024686d74780b0cadc000000fc0
00003c4a6c6f63610134b42000004c0c00003c8c6d617870214303970000
8898000000206e616d6546b529ab000088b8000004c1707265706baf02fe
00008d7c00002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
feff0600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb88e1c91b25f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000100000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000f03040e0000000000000000000001cf000004a1
002304a1002304a1002304a1002304a1002304a1002304a1002304a10023
04a1002304a1002304a10023061bffcc061bffcc045a00ac044400610444
00610444006104440061044400610444006104ec00ac04ec009704ff001b
04ff001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8
005f03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b
050c005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a0204
00280204ff390204ff310204ff500204ff4f0204ff7b0204001e02040027
049200ac028d0007028dffa9042800ac042800ac035d00ac035d00810362
00ac035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac
052a00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c
0063054c0063054c0063054c0063054c0063054f0063054f006306ef0063
042200ac042200ac05620063045800ac045800ac04580053045800ac03ad
004703ad004703ad001503ad001803ad004703ad004703e6000f03e6000f
03e6000f03e6000f052200aa052200aa052200aa052200aa052200aa0522
00aa052200aa052200aa052200aa052200aa052200aa048a0022071e003d
071e003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6
001e03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d
03cb006d03cb006d03cb006d03cb006d046500a10465006a047700320477
0032038000a103800030038000a103800020038000200380002c03800029
03800042038000a1038000a1035000a10482006c0482006c0482006c0482
006c0482006c047800a10478008c049d004001ec00a101ecff5801ec0019
01ecff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b
00a1023e0000023eff8c03c900a103c900a102e000a102e0008702e600a1
02e000a102f0003203d500a1060600a1049100a1049100a1049100990491
0078049100a1046600a104aa006604aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006604ba006604ba00660606006603c5
00a103c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049
034f0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359
001c0359001c048d009f048d009c048d009f048d0097048d0075048d009f
048d009f048d009f048d009f048d009f048d009f03fd0021063e0037063e
0037063e0037063e0037063e003703cc0036038300100383001003830010
03830010038300100369004403690044036900080369004403d5005c03d5
005c03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c
03d5005c03d5005c062f005c062f005c043400990362005a0362005a0362
004e036200570362005a0362005a076f005a06dd005a0601005a0601005a
04340060048c0060046a00600434006103fb005d03fb005d03fb005d03fb
005d03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025
069a002508d5002504ab0025069b002508d50025043c0025043c0025043c
0025043c0025044f0025044f0025044f0025044f0025043c0025043c0025
067600250676002506760025067600250689002506890025068900250689
00250676002506760025043c0025043c0025067600250609002508430025
043c0025043c002504830025043c00250676002504ed002504ed00250513
00250728002503c4003503c4003503c4003503c4003503c4003504340060
04340060043400600434006004340060043400990434ffad0443fff901d6
008501d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff67
01d6001101d6009903c00085041e008801eaffd501eaffd501eaff6303a3
009903a3009903a3009901d6009901d6002a021c009901d6004b01fb001c
02fd0099066400990434009904340099043400990434004e0434009904a2
ff9d043400990438005a0438005a0438005a0438005a0438004f0438005a
0438005a0438005a0438005a043c005a043c005a06cc005a043400990434
00990434006002ca009902ca009902cafff902ca006e0321005103210051
0321fffe0321fffd032100510321005105ae005105ae00510438009901f1
009902ae002102c4002102ae002102bc002604e600210475002104750021
047500210475002104750021047500210475002104750021047500210475
002105130021074b002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002106d90021043400940434008e0434
0094043400860434004d0434008904340086043400940434009404340094
04340094039d002205b8003505b8003505b8003505b8003505b800350377
0029039f0022039f0022039f0022039f0022039f00220329005903290059
032900070329005903380072036100640378005d02ac004402e5006c024e
004402e5004802b8004701c100240297002a02e9006c01630061016dffd8
0297006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6
006c0230004201e3002302e9006c0285001f03ef002c027e00280286001f
023700420254000002750000029400000000fd080000fce8025600000275
0000029400000000fd080000fce803290000035f0000039400000000fc9f
0000fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a
000003a2000003a800000000fc650000fc600324000002f5000003460000
036700000000fca00000fc7e0327000003490000036a00000000fc9d0000
fc7d030c0000030f0000031100000000fcac0000fca90291000002980000
02a000000000fce90000fce202cf000002c2000002b5000003c1000003e1
0000040000000000fc520000fc3101ce000001d6000001ce000001ce0000
0000fd4d0000fd4d027500840000fd7a027f00840000fd7601f700840231
000004a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec7
03bf003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff520428
00ac0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac
042200ac03ab004603e6000f03e6001e03e6fe6e03e6001e061300000427
0030060000900550005e0550fef903f4001003f40010040400a102fb00a1
03c90023038000a1038000a103690044047800a1047800a104b4006601ec
00a101ec000001ecff5403c900a103e10011060600a1049100a10387005e
04aa006604aa0066047800a103c500a1035b004b0359001c038300100383
0010038300100552000003cc00360558008704b1006604b10066048a0061
048a00610440009904320064039200180430000003a5005903a5005902c8
004e044c0099044c00990441006004780006023200940232ffec0232ff7a
0232ff0f03a3009903b4000004660099039700220302004d0303004d0438
005a0438005a046c002804120076044100590349005c0319000304550090
045500900455007d0455001605360055053b00550369001205a900940592
006405920064028900000000fd0a03f400000000fc360205009702050097
020500970224004801ff006e01ff006e04a10023044d00ad045a00ac0370
00ac037000ac037600ac0527000303e800ac03e8004503e8006106680055
03ca004b052200ac052200ac052200ac020400ac0204ff50028d00070458
00ac045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063
054c006304f900ac042200ac0444006103ad004703e6000f0438000f0438
000f04b800220594000004270030051c00ac04f500ac0472007406f200ac
071e00ac04eb000f061800ac044000ac0462005d04610062070800ac0471
005304ff000f04f2000f0504000003f4001003ee00a2040400a1031400a1
031400a1032700a10480000e038000a1038000300380002c057800440380
0057048900a1048900960489009501ec00a101ecff55023e000003ca00a1
03ca00a104320001060600a1047800a104aa006604a90066046a00a103c5
00a103cb006d034f00490359001c039d001e039d001b042f0022050a0000
03cc0036048e00a1046900a103fa006d062300a1064500a1045f00170583
00a103e800a103e4006b03f00066063200a103ff005c045f001f0463001f
044d000006010001063200a103d5005c044300000430000003d5009902c4
009902c4009902d5009901d6ff58047700170434006003fb005d03fb005d
03fb005d0583003e0362004b04530099045300780453008801d6008501d6
ff7201eaffd503b6009903b6009904150016060200130569005f04470099
062800990438005a0431005a042a009904340086043400990362005a0321
00510319000a06640099039f0022039f001803d2002204fe005103770029
045500990433009903c0004205d4009905fe0099044a000a0554009903c2
0099038b004d038d005d05c6009903cb00380453fff90443fff904270018
036e0000036e0000036e00000000fca50000fca5029b010a029b00bf029b
00bf03b5008503b5005e03b5005e03de0064026000ed026000b10364007a
0361005f01ff002a02240048022400bb020500970586009601ff008c01ff
002a01ff008c01ff002a035900880359002b035900880359002b01ff002a
0359002b02b6007402b600c002b6007402b600c004190075041900ad0419
0075041900ad0317000102df001f03af018a03fc01ae0317000b02df002d
027300450273004503fcfff603fcfff6073e0095073e0095073e0095073e
009503fcfff903fc00c10205009702050097026d0085026d007a027400bf
0274005a0284005602840075024000840240007a024a00b0024a0067026d
0085026d007a027400bf0274005a028400560284007503fc009e03fc0077
03fc007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335
008b057500000556000007f7000007270000073c00000727000006ad00af
06ad00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e
002a03fc0057040e00600434005803fc00b903fc004a040e005303fc006d
0419002b040e003403f30035039f006103be005f039f0058039f00250621
0049083300ac03fc002406e300a10411001d0494005f02cb002303ec0062
03ec00510455002203d700510436007e03b20035043600630436005c040e
0048040e00ae040e0072040e0067040e0020040e0065040e006b040e0063
040e0052040e005204430067028d00190381005c0373005903ac00260368
006103b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065
039f0062039f003a039f0067039f0061039f005e039f0051039f00500494
005f02cb002303ec006203ec00510428002203d700510436007e03b20035
043600630436005c040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e00520321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc00580321004801f8002302b0004b
02ad004102db002502a6004502df005b0291003202e1004b02df004402ea
005102df005102d0005701bc006001bc0058029d003801f500310252003c
0249002d024a001402460032025100300238002202570025024d0023029d
003801f500310252003c0249002d024a0014024600320251003002380022
02570025024d002302b1ff4b03130044055f004405690044051700440569
0044052e00440553004405c9004e05c9004e0567004705b7004705a20047
05cd0027057d004505a20045052a003505b80048084e0048057d005c07c9
005c03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc0059
03fc004503fc006503fc004c03fc005503fc005603fc003d05e9002c0405
003506d300690443006102ed000703fc00080484003a0550005e04660099
066500660454005b0416004a073e009a073e0096073e00c9073e00c9070e
00af070e013a070e00af070e013a0a4e009a0638009f04660028018a0000
01da00000466000004660000046600000466000004660000046600000466
000004660000046600000466000004660000046600000466000004660000
0466000004660000046601d004a1002304a1002304a1002304a1001904a1
001504a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a10023
03e800ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e8
003702040015020400a0054c0063054c0063054c0063054c0063054c0063
054c0063054c006305940063059400630594006305940063059400630594
0063052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa
05c600aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5
ffb103d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb8
03d5005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fb
ffcb03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea
0438ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a0
004904a0005a043400940434009404d2009404d2009404d2008c04d20094
04d2004604d20094039f0022039f0002039f0022046a00530466003803f4
001003f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc8
03f4ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380
ffa70380ffa00380ffa20380ff8e0380001101ec000901ec009404aa0066
04aa006604aa002104aa002204aa002104aa002204aa006604ec006604ec
006604ec006604ec006604ec006604ec0066048d009f048d009f0515009f
0515009f0515009a0515009f051500750515009f038300100383fff10383
001001da0000046600000466000004660000046600000466000004660000
046600000466000004c10066052400ac052400ac050600ac049300a10493
00a1047c00a103e6000f02ae00210359001c01d60011043c0025043c0025
043c002506760025067600250676002502f5001c02e7008e0306005a034b
008e02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e
025b008e046d008e0375008d0375005a02d8008e0375005a029b00570280
0046025700040314005702e3001a0445002202b5001c028b001c02b80050
0000fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c1
0000030cffff030c0000030cffff030c0002023100000231000001ffffff
01ffffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa
009802aa009801ce008402aa008202aa008202aa008202aa0082027f008e
027f008e0324000002910084046601fd02aa001402aa0013032900000329
0000032900000329ffff039a00000327000003fcfff903fcfff9039a0000
039a00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000
fdc20000fdc201ce008402aa00140291008302aa001502aa009302aa0093
039a014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000
feb702aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000
039a0000039a0000039a0000039a000004010014040101470000000002aa
ffff02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c8
02aa00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b1
008402aaffff02aaffff075c003c075cffff075cffff075cffff075cffff
075c003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df
003001e7003201e7003200f8004400f8004402070030020700300209004c
0209004c019d0030019d003002070032020700320209004c0209004c0309
004c0309004c015f004c015f004c015200180152001801c3001601c30016
01bf001c01bf001c032700510327005103270051032700510000ffab03bd
ffff041a0000041a00000416000104160001041a0001041a0001041a0001
041a000104010002040100020401000204010002015f004c02aa00c801ce
00c803f100c804ec000f044d00ad0440001e0462005d049d006104ff001b
057e000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a
001c025000ac0226001b042800ac070900aa052affd6054c0063062f0061
04e4000f045800ac03ad004703ab0046043f000f03e6000f0550005e0522
00aa0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac
060300ac054700ac07b700ac071400ac04a100230204ff3a054c00630522
00aa052200aa052200aa052200aa052200aa04a1002304a10023061bffcc
050c005b050c005b04280073054c0063054c006303ca0008089500ac0815
00ac050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe1
03e8006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522
002f052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a10023
03e800ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444
ffe7035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e
02a10007050a00630469001a04a0001b04a10023045a00ac045a00ac045a
00990444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e80084
03e8008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc
00ac04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac
042800a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d7
00ac052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063
054c0063042200ac042200ac045800ac045800ac04580077045800ac03ad
004703ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f
03e6000f052200aa052200aa052200aa052200aa052200aa048a0022048a
0022071e003d071e003d042700300427003003e6001e03bf001503bf003b
03bf003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2
003b0444003803ad005903b500ac046a0027043400990434000403b3005a
043400600430005d0271ffee064300990434009903a300990241002703b4
0014044c0099053e0059043400990321005102e0002102ae002103fc001b
0329005903ca004b0366003a03680050075d006003c00099061e009903d5
005601d6ff570438005a0434007a04340088043400880434008804340088
03fb006203d5005803d50058062f005c044cffe203c4003503a3003a0438
005a0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf
03d5005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02ca
ff7302ca00100434ffff0434008703ca004b0434005104cd0060040e0052
034c005903d5005c03fb005d0438005a0438004f0438005a0438005a039f
00220289009804eb009902ae002106930060069200600362fff003210051
032900590394006403fb003c0240fff70240fff70434006002ff002703e2
002203720049040e00720321005101f300ad032900ad049700ac029b010a
03d5005c0434009904340099043400860362005a04340060043400600434
0060043400600434006003fb005d03fb005d03fb005d03fb003f03fb005d
0271002503c40035043400990434009904340067043400130434009401d6
ff1f01d6ff1f01d6ff5a03a3009903a3009903a3006b01d6008901d6ff58
01d6ff5801d6ff5906640099066400990664009904340099043400990434
0086043400860438004f0438004f0438005a0438005a0434009904340099
02ca009902ca008a02ca000a02caffff0321005103210051032100510321
00030321005102ae002102ae002102aeffd202aeffd20434008904340041
0434007b0434004d04340086039d0001039d002205b8003505b800350377
002903770029039f00220329000103290059032900000434008602aeffc6
05b80035039f002203d5005c01f100530241002703d5002902aeff960463
009903db00990344005903c200360362003b02ee003c03190099053b0055
0471000803ee00a203ee001403cb004803fc006d0477003204d3000803ee
00530380007204a40066038a00680350ffe80482006c03f300130232008e
01ecfffe03c900a1063200910491ffe804aa00660592006e0433000803ed
00a1034f0053035b004b038300080359001c04b10066048d009f03b70010
03690044039000570393006b0398005507ce00a1085500ac055a00a105cd
00ac06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f
048d009f048d009f048d009f03f4001003f40010055cffe20482006c0482
006c03c9005204aa006604aa00660390000007ce00a1085500ac0482006c
065500a1046200a0049100a103f4ffc503f400100380ffb10380004d01ec
fed001ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f
039000570478008c049300a103c50057038c004403f40010038000a104aa
006604aa006604aa006604aa00660383001003f4001003cb002402e00027
0359ffeb0339005004040027048d002703fd00210380ffff023e0000048b
006603ed00270383000c039000550339005001f300ac032900ac049700ac
026000ed03f40010040400a1040400a10404006e03cb006d046500a10465
00a104650081046500a1046500950380002a038000260380004103800000
0380004a035000a10482006c047800a1047800a10478009a047800200478
00a101ecff2a01ecff5503c900a103c900a103c9007e02e000a102e00000
02e0002802e00024060600a1060600a1060600a1049100a1049100a10491
00a1049100a104aa006604aa006604aa006604aa006603c500a103c500a1
03ed00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f
0000034f00490359001c0359001c0359001803590019048d009f048d0079
048d009f048d0075048d009f03fd002103fd0021063e0037063e003703cc
003603cc003603830010036900050369004403690020047800a10359000a
063e00370383001003f4001002e00027035effa703c5002703ed00a104b6
00a103ef00a10369004403cb004803500060039900a1043c0025043c0025
0447002504470025043c0025043c0025044f0025043c0025043c00250676
002506760025068200250682002506760025067600250689002506760025
067600250475002104750021047500210475002104750021047500210475
0021047500210475002106d9002106d9002106d9002106d9002106d90021
06d9002106d9002106d9002106d9002103d5009604340060043400990434
00990362003b039b005a043400600434006003fb006203fb0062051b0065
0362005a0362004b0435004b043b005d0241fff704340060043400600451
005a039d001f03d0001e0433009404340099043400990241002701d6fff3
0232009401d6009902e7ffa702f9002701d6009904860099066300940663
0094066400990434ffc204340099045300990438005a05b3005a05920064
0536005502ca002302ca002302ca002302ca009902ca0099028e0094028e
002303980085039800850321005101eaffd50242fff801eaffd5028affc4
02ae004102ae002104a400270476004904550090039d002205b80035039f
00220351001f0329005903d3005903bc004b03bb0056039400640394005e
039400640362005a0507005f03d50099043b005a046b005a04470099028a
ffc403a300270319009904340060039400640394005e066f006006d40060
0719006004f3002103c40021057a0021060c002504ae00990469009903ef
002c03ef00700434ffd5044dffd503d60010050fffe3062f006204120027
03cb006a0444009904590030033f0099036f005501d60085022700000391
009802f000300569005f045300990474005a03cb006304a9006604a80066
0528001406cc00560368003a0438005a0438005a03a8009903cf005203cf
0052033f001b046a009a0465004b05c7004b0664014c03de0020060e0035
034f0042032f00380321005103d0001e02f2009903de00200450009903a8
0099052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e
02a8008e02a800500344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375008d0375005a02b2004802d8008e029b0057
02570004031400570445002202ac004402ac006c02e50048042b004402e5
006c02e5004802b8004702b8004702770046027700460297002a01630061
0297006c0456006c02e6006c02e60045024e003602e6004502e6004502e5
006c01e3002302e9006c02db00460456006c0285001f024a000d02be006c
024600230283002803650055025f00180163006101f6006c02e9006c0285
001f02be006c0246002302e5006c03650050025f00180694009404bbffa7
04bd0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d
0014030fffa70329ffc203c4003b0304006e03c400350688002102410027
026900270468002704db002704c40027043400990451006002710025054c
0060041e009901f0006b067f0099045100990434009902ca006a037b0051
02faffd5039d002203ed0029033c0059047c005c04d800600434006003fb
005d0362005a0362004b03fb006201d600850362003b0233001e04d80094
0376004b02e5006b024e0044026e004402b200440277004201c1002401c1
00070297002a02e9006c0192000001aa006c0163006d0192000001e50000
0194006c017b00530224006e0456006c0456006c031b0000031c006c0304
006e02e600450336004502300042016dffd801e4002302e9000002b8002c
02e6006e02e6006e0285001f023700420294004202a600420272003c02e6
004502e9006c02e9006c016dffd801f6006c01f6002502030025028b006c
03ef002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce
008401ce0084029900650299006c03fc004503fc0065044b0044044b0044
025100f20256000002540000025100f20327000002540000025600000239
00980239009801ce008401ce008402aa008202aa008202aa008202aa0082
02aa004b02aa009302610024015e006c02300042027e00280299006c0310
009603100096031000960310009603100096045700960457009604570096
045700960310004304570043045700430457004304570043045700430457
00430457002f0457002f0457002f0457002f0457002f0310002f04570025
045700250457002504570025045700250310001a0457001a0457001a0457
001a0457001a0457001a0310004204570042045700420457004204570042
045700420457009604570096045700960457009603100042045700420457
0042045700420457004204570042045700420457002f0457002f0457002f
0457002f0457002f0310002f0457002f0457002f0457002f0457002f0457
002f03100026045700260457002604570026045700260457002603100042
045700420457004204570042045700420457004204570096045700960457
009604570096031000420457004204570042045700420457004204570042
031000260457002604570026045700260457002604570026031000230457
0023045700230457002304570023045700230310002f0457002f0457002f
0457002f0457002f0457002f0310004b0457004b0457004b0457004b0457
004b0457004b045700960457009604570096045700960310004204570042
045700420457004204570042045700420310001a0457001a0457001a0457
001a0457001a0457001a0310002404570024045700240457002404570024
045700240310002f0457002f0457002f0457002f0457002f0457002f0310
004e0457004e0457004e0457004e0457004e0457004e0457009604570096
045700960457009602aa006202aa006203290000049a00000359002b02aa
008502aa008502aa00c802aa00c8029100840254000003c1ffff03c10000
039a0000022400bb02aa009802aa009802aa009802aa00980440fff60440
fff60302009803270000032700000324000002aa0000071200d4071200d4
02ac004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d9
000001d90000028900000289000002890000028900000000fc660000fc66
032900000329000003290000032900000324000003240000032900000329
00000329000003290000032400000324000003f4000003f4000003f40000
03f40000032400000324000003270000030c000001ffffff01d900000327
000003290000032900000329000004660000046600000466000004660000
03f4000003f4000003f4000003f40000023200b6023200b6054c00630444
006104440043044400610444004303e6000e0456fec803e6000e03ad00ac
054c0063045d001e059700ac04a2000f04440061042200ac043200640375
005a037500420478000604d700510684001404120076041200030362005a
0362003b0362005a0362003b053b0055037800940438005a0399001404c5
009904a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d
03cb004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1
005b03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a
04a1fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1
ff5804a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff22
04a1ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665
fe620665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe82
04bdfe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1
fe8205d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea4
04fcfe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1
fe8205d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa
06c0fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261
feaa0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e
0204ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054c
fecf054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550
ff0605f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff06
05f2fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714
005e0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c
075dfeaa048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a005a048a0061048a0061048a0061
048a0061048a0061048a0061048a0061048a0061048a0061048a0061048a
0061048a0061048a0061048a005a03a5005903a5005903a5004f03a50059
03a5005203a5005203a5005903a50059044c0099044c0092044c008f044c
0094044c0099044c0092044c0092044c0094044c0099044c0099044c0059
044c0099044c0099044c0092044c008f044c0094044c0099044c0092044c
0092044c0094044c0099044c0099044c0059023200010232ff860232ff83
0232ff62023200000232ff860232ff860232ff600232ff100232fecf0232
ff600232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a
0438005a0438005a0438005a0438005a0438005a0438005a041200760412
007604550090045500820455008204550084045500900455008204550082
045500840455001204550010045500800455009004550090045500410455
00710455007d059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006403f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001005b9001005b9001005b9001005b9001005b9001005b90010
05b9001005b9001005b90010038000a10380004903800049038000a10380
004903800049038000a10380007b047800a1047800a1047800a1047800a1
047800a1047800a1047800a1047800a1047800a1047800a10478006f0478
00a1047800a1047800a1047800a1047800a1047800a1047800a1047800a1
047800a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c
00a1063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec0009
01ecff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ec
ff8c01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa0066
04aa006604aa006604aa006604aa006603c500a103c500a1038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a038300100389001a038300100389001a0383
00100389001a038300100389001a0383fff50389fff5038300100389001a
038300100389001a04b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b100660675
006606750066067500660675006606750066067500660675006606750066
0675006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1
fe8b04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa
04fcfef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060d
fe780599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc5
0665fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c0
00ac06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a
06c0fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6
fe7b07d5fe7c0714fe6101d9ffff01d900000289000002890000039a0000
03290000032900000324000003290000032900000324000003f4000003f4
00000324000001d9000003270000030c0000023200b601c4007901c40079
01c40079054e00ac0440000a042200ac0366001b044100ac06b2005503ca
004b04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac
051900610444006103e6000f03e6001e03e6001e0476003005d2000f049a
007404720074047200ad05f6002805f60028020400ac06680055045f00ac
050e000304fc00ac04fc00ac04720074070700ac04a1002304a10023061b
ffcc03e8005905250064052500640668005503ca001503ca004b052200ac
052200ac054c0063054c0063054c00630462004c0438000f0438000f0438
000f04720071035300ac061800ac0366001b048500300427003004400035
065d0037061d003d041a003d070f0003072800ac0515005b0521000f03ca
005a05090003045f009903df00270434009902f90027039f009905c0003e
0362004b03f4009903b6009903eb00270447000a0471009904d8009905f1
0099045c00590362005a0319000a039d0022039d002203b2002904c5000a
03ea004203c0004203c0009904c8001904c800190583003e03cf00990421
0016044700990454009903c0004205b6005f020400ac03d5002e03d50058
062f005c03fb005603fb006203fb00620583003e0362000803bc004b0453
0095045300970438005a0431005a0431005a038b0004039f0022039f0022
039f002203c0002902c400990554009902f9002703b10029037700290434
006006550060059b004b03ba004b061f001606500099044500500481000a
0362005a042b001604a800a103e8002703c500a10314002703ec00a105d0
004403800057041c00a103ca00a103ca002704530017049800a1050100a1
067700a104a2006503cb006d0359001c0383001003830010041300360545
001c041a006d03fa006d03fa00a1054f0020054f002001ec00a105780044
03ff00a1045a0001047800a104a100a103fa006d062f00a103f4001003f4
0010055cffe20380004204a2006504a20065057800440380000303900057
048900a0048900a004aa006604a9006604a9006603e4001e039d001e039d
001e039d001e03fa0044031400a1058300a1031400270417003603cc0036
03e8004a0588004a0559007203d8007205d20001061900a10488006c0444
001c03800068045c00010400000008000000040000000800000002af0000
02000000015500000450000001bc00000199000001000000000000000000
ffdc0000ff25040e0024040e00240329000003fcfff901ff008c03580088
01c400540334005404a400540476010a03fcfffb0273004404ee004f0444
00610444006103ad0027040e005306640099052a0020076000ac064800ac
071e002005f500ac0428001b03e6000f08a80032043afffe0482002104b2
005b0495002003ad0020044400610621004906210065057800e6059d00e6
03fc005e070100bc03fc0062045201d7045200be0400fff6040001bd0400
01bd0400fff6040001bd0400fff6070900aa045c005b047200ad04440071
04d0003a0562007403c9001006640094042f005f04180015035a0053040b
00300441006f03260010032700030327000303270003025400c0025400c0
025400c8025400c802aaff8c02aaff8c04e0005907f4000a07e200140798
0003076c0061064100ac050b002406a700ac05c80055073f00ac03ca0021
0600009004b8001c085c0063054c003b076c0061076c006104440061056a
0022053400990433001b05af00990480001b060b0099034e001605a90094
03d2ffc40745005a049c005a06420059056a00220362005a06b8006d05c3
00a10453001205c000a1050b0046066400a10380002205580087042e0022
07f10066050f006806b0006d06b8006d039c006d03c7009602aa00db040e
008d0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b
0aa000b404d5009202d5008302d5008304d500b202d500700aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0000fc48000000000000fd170000000000000000039a0000039a00000324
00000324000003240000039a000003240000032400000256000003290000
0329000003bdffff02aaff8c055001e5027f008403240000039a00000256
000000000027000000e1000000ed0000001b032400000324000003240000
032400000324000003240000032400000324000003240000032400000000
0000000000000000000000000000039a0000039a00000346000000000027
03c10000030f00000346000003460000039a0000034800000348000003a2
000003a2000002560000035f00000000009e00000067000000220000009e
0000009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6
fe4703e6fe4703e6000e03e6000e03f4001003f4001003f4001005b80010
05b8001005b80010047800a1047800a10478006f063c00a1063c00a1063c
006f0383ffc80383ffc80383001004b1006604b1006604b1006606750066
06750066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000
fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc00
0000fc000000fc000000fc000000fc000000fc000000fc000000fc000000
fdd00000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff
0000fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000
fd340000fd340000fd340000fd340000fd600000fd600000fd730000fd73
0000fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000
fca10000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae
0000fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000
fdd00000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc65
0000fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000
fc650000fc650000fc650000fc650000fc460000fd790000fcde0000fcde
0000fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000
fce30000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde
0000fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000
fc970000fc970000fc560000fc560000fc910000fd820000fd820000fd70
0000fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000
fd8f0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb
0000fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000
fd710000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc26
0000fc290000fc290000fc270000fc270000fc270000fc270000fc350000
fc350000fc350000fc350000fdb60000fda80000fda80000fce30000fd46
0000fd460000fd470000fd470000fd020000fd020000fd020000fd020000
fc650000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca1
0000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000
fc370000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd33
0000fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000
fbff0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd
0000fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000
fc6a0000fc6a03e6fe940389ffcb0389ffcb0389001a01d6008904340060
043400600434006004340060043c0025067600250aa000b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b400b400b4
00b400b400b400b400b400b400b400b400b400b400b400b400b4000000>
<000000000000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
000001420000014200000142000001420000014200000142000001420000
014200000142000001420000014200000142000001420000014200000142
00000142000001420000014200000142000002a0000002a0000002a00000
02a0000002a0000002a0000002a0000002a0000002a0000002a0000002a0
000002a0000002a0000003d2000003d2000003d2000003d2000003d20000
03d2000003d2000003d2000003d2000003d2000003d20000050000000500
000005000000050000000642000006420000064200000642000006420000
064200000642000006420000064200000642000006420000064200000642
000006420000064200000642000006420000064200000642000006420000
064200000642000006420000064200000642000006420000064200000642
000006420000064200000642000006420000064200000642000006420000
064200000642000006420000064200000642000006420000064200000642
000006420000064200000642000006420000064200000642000006420000
064200000642000006420000064200000642000006420000064200000642
000006420000064200000642000006420000064200000734000007340000
073400000734000007340000073400000734000007340000073400000734
000007340000073400000734000007340000073400000734000007340000
0734000007ba000007ba000007ba000007ba000007ba000007ba000007ba
000007ba000007ba000007ba000007ba000007ba000007ba000007ba0000
08d6000008d6000008d6000008d6000008d6000008d6000008d6000008d6
000008d6000008d6000008d6000008d600000a0400000a0400000a040000
0af600000af600000af600000af600000af600000af600000af600000af6
00000af600000af600000af600000af600000af600000af600000bee0000
0bee00000bee00000bee00000bee00000bee00000bee00000bee00000bee
00000bee00000bee00000bee00000bee00000bee00000bee00000bee0000
0bee00000bee00000bee00000bee00000bee00000bee00000bee00000bee
00000bee00000bee00000bee00000bee00000bee00000bee00000bee0000
0bee00000bee00000bee00000bee00000bee00000bee00000bee00000bee
00000d9e00000d9e00000d9e00000d9e00000d9e00000d9e00000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000e6800000e6800000e6800000e6800000e680000
0e6800000e6800000e6800000e6800000e6800000e6800000e6800000e68
00000e6800000e6800000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00000eac00000eac00000eac00000eac
00000eac00000eac00000eac00000eac00000eac00000eac00000eac0000
0eac00000eac00000eac00000eac00001008000010080000125400001254
000012540000125400001254000012540000125400001254000012540000
125400001254000012540000125400001254000012540000125400001254
000012540000125400001254000012540000125400001254000012540000
125400001254000012540000125400001254000012540000125400001254
000013ba000015280000166800001668000017f2000017f2000018020000
180200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
000018120000181200001812000018120000181200001812000018120000
181200001812000018120000181200001812000018120000181200001812
0000181200001812000018120000181200001812000100000f2201200010
00c3000700020010002f0065000011900182000400010000000e00ae0000
00030000000000640000000000030000000700fa00640001000000000000
0032015e0001000000000003000e01900001000000000004000e019e0001
000000000006000e01ac0001000000000007007d01ba0003000104090000
006402370003000104090001001c029b0003000104090002000e02b70003
000104090003001c02c50003000104090004001c02e10003000104090006
001c02fd000300010409000700fa031900a9002000320030003000380020
004d006900630072006f0073006f0066007400200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e00430061
006c00690062007200690020006900730020006500690074006800650072
002000610020007200650067006900730074006500720065006400200074
0072006100640065006d00610072006b0020006f00720020006100200074
0072006100640065006d00610072006b0020006f00660020004d00690063
0072006f0073006f0066007400200043006f00720070006f007200610074
0069006f006e00200069006e002000740068006500200055006e00690074
00650064002000530074006100740065007300200061006e0064002f006f
00720020006f007400680065007200200063006f0075006e007400720069
00650073002ea92032303038204d6963726f736f667420436f72706f7261
74696f6e2e20416c6c205269676874732052657365727665642e42424842
56512b43616c696272694242484256512b43616c69627269424248425651
2b43616c6962726943616c69627269206973206569746865722061207265
67697374657265642074726164656d61726b206f7220612074726164656d
61726b206f66204d6963726f736f667420436f72706f726174696f6e2069
6e2074686520556e697465642053746174657320616e642f6f72206f7468
657220636f756e74726965732e00a9002000320030003000380020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e00420042004800
4200560051002b00430061006c0069006200720069005200650067007500
6c00610072004200420048004200560051002b00430061006c0069006200
720069004200420048004200560051002b00430061006c00690062007200
69004200420048004200560051002b00430061006c006900620072006900
430061006c00690062007200690020006900730020006500690074006800
650072002000610020007200650067006900730074006500720065006400
2000740072006100640065006d00610072006b0020006f00720020006100
2000740072006100640065006d00610072006b0020006f00660020004d00
6900630072006f0073006f0066007400200043006f00720070006f007200
6100740069006f006e00200069006e002000740068006500200055006e00
69007400650064002000530074006100740065007300200061006e006400
2f006f00720020006f007400680065007200200063006f0075006e007400
72006900650073002e000000b2090320b80284b40918014a20b80283b409
18014a20b80282b40918014a20b80281b40918014a20b80280b40918014a
20b8027fb40918014a20b8027eb40918014a20b8027db40918014a20b802
7cb40918014a20b8027bb40918014a20b8027ab40918014a20b80279b409
18014a20b80278b40918014a20b80277b40918014a20b80276b40918014a
20b80275b40918014a20b80274b40918014a20b80273b40918014a20b802
71b40918014a20b80270b40918014a20b8026fb40918014a20b8026eb409
18014a20b8026db40918014a20b8026cb40918014a20b8026bb40918014a
20b8026ab40918014a20b80269b40918014a20b80268b40918014a20b802
67b40918014a20b80266b40918014a20b80265b40918014a20b80264b409
18014a20b80263b40918014a20b80262b40918014a20b80261b40918014a
20b80260b40918014a20b8025fb40918014a20b8025eb40918014a20b802
5db40918014a20b8025cb40918014a20b8025bb40918014a20b8025ab409
18014a20b80259b40918014a20b80258b40918014a20b80257b40918014a
20b80256b40918014a20b80255b40918014a20b80254b40918014a20b802
53b40918014a20b80252b40918014a20b80251b40918014a20b80250b409
18014a20b8024fb40918014a20b8024eb40918014a20b8024db40918014a
20b8024cb40918014a20b8024bb40918014a20b8024ab40918014a20b802
49b40918014a20b80248b40918014a20b80247b40918014a20b80246b409
18014a20b80245b40918014a20b80244b40918014a20b80243b40918014a
20b80242b40918014a20b80241b40918014a20b80240b40918014a20b802
3fb40918014a20b8023eb40918014a20b8023db40918014a20b8023cb409
18014a20b8023bb40918014a20b8023ab40918014a20b80239b40918014a
20b80238b40918014a20b80237b40918014a20b80236b40918014a20b802
35b40918014a20b80234b40918014a20b80233b40918014a20b80232b409
18014a20b80231b40918014a20b80230b40918014a20b8022fb40918014a
20b8022eb40918014a20b8022db40918014a20b8022cb40918014a20b802
2bb40918014a20b8022ab40918014a20b80229b40918014a20b80228b409
18014a20b80227b40918014a20b80226b40918014a20b80225b40918014a
20b80224b40918014a20b80223b40918014a20b80222b40918014a20b802
21b40918014a20b80220b40918014a20b8021fb40918014a20b8021eb409
18014a20b8021db40918014a20b8021cb40918014a20b8021bb40918014a
20b8021ab40918014a20b80219b40918014a20b80218b40918014a20b802
17b40918014a20b80216b40918014a20b80215b40918014a20b80214b409
18014a20b80213b40918014a20b80212b40918014a20b80211b40918014a
20b80210b40918014a20b8020fb40918014a20b8020eb40918014a20b802
0db40918014a20b8020cb40918014a20b8020bb40918014a20b8020ab409
18014a20b80209b40918014a20b80208b40918014a20b80207b40918014a
20b80206b40918014a20b80205b40918014a20b80204b40918014a20b802
03b40918014a20b80202b40918014a20b80201b40918014a20b80200b409
18014a20b801ffb40918014a20b801feb40918014a20b801fdb40918014a
20b801fcb40918014a20b801fbb40918014a20b801fab40918014a20b801
f9b40918014a20b801f8b40918014a20b801f7b40918014a20b801f6b409
18014a20b801f5b40918014a20b801f4b40918014a20b801f3b40918014a
20b801f2b40918014a20b801f1b40918014a20b801f0b40918014a20b801
efb40918014a20b801eeb40918014a20b801edb40918014a20b801ecb409
18014a20b801ebb40918014a20b801eab40918014a20b801e9b40918014a
20b801e8b40918014a20b801e7b40918014a20b801e6b40918014a20b801
e5b40918014a20b801e4b40918014a20b801e3b40918014a20b801e2b409
18014a20b801e1b40918014a20b801e0b40918014a20b801dfb40918014a
20b801deb40918014a20b801ddb40918014a20b801dcb40918014a20b801
dbb40918014a20b801dab40918014a20b801d9b40918014a20b801d8b409
18014a20b801d7b40918014a20b801d6b40918014a20b801d5b40918014a
20b801d4b40918014a20b801d3b40918014a20b801d2b40918014a20b801
d1b40918014a20b801d0b40918014a20b801cfb40918014a20b801ceb409
18014a20b801cdb40918014a20b801ccb40918014a20b801cbb40918014a
20b801cab40918014a20b801c9b40918014a20b801c8b40918014a20b801
c7b40918014a20b801c6b40918014a20b801c5b40918014a20b801c4b409
18014a20b801c3b40918014a20b801c2b40918014a20b801c1b40918014a
20b801c0b40918014a20b801bfb40918014a20b801beb40918014a20b801
bdb40918014a20b801bcb40918014a20b801bbb40918014a20b801bab409
18014a20b801b9b40918014a20b801b8b40918014a20b801b7b40918014a
20b801b6b40918014a20b801b5b40918014a20b801b4b40918014a20b801
b3b40918014a20b801b2b40918014a20b801b1b40918014a20b801b0b409
18014a20b801afb40918014a20b801aeb40918014a20b801adb40918014a
20b801acb40918014a20b801abb40918014a20b801aab40918014a20b801
a9b40918014a20b801a8b40918014a20b801a7b40918014a20b801a6b409
18014a20b801a5b40918014a20b801a4b40918014a20b801a3b40918014a
20b801a2b40918014a20b801a1b40918014a20b801a0b40918014a20b801
9fb40918014a20b8019eb40918014a20b8019db40918014a20b8019cb409
18014a20b8019bb40918014a20b8019ab40918014a20b80199b40918014a
20b80198b40918014a20b80197b40918014a20b80196b40918014a20b801
95b40918014a20b80194b40918014a20b80193b40918014a20b80192b409
18014a20b80191b40918014a20b80190b40918014a20b8018fb40918014a
20b8018eb40918014a20b8018db40918014a20b8018cb40918014a20b801
8bb40918014a20b8018ab40918014a20b80189b40918014a20b80188b409
18014a20b80187b40918014a20b80186b40918014a20b80185b40918014a
20b80184b40918014a20b80183b40918014a20b80182b40918014a20b801
81b40918014a20b80180b40918014a20b8017fb40918014a20b8017eb409
18014a20b8017db40918014a20b8017cb40918014a20b8017bb40918014a
20b8017ab40918014a20b80179b40918014a20b80178b40918014a20b801
77b40918014a20b80176b40918014a20b80175b40918014a20b80174b409
18014a20b80173b40918014a20b80172b40918014a20b80171b40918014a
20b80170b40918014a20b8016fb40918014a20b8016eb40918014a20b801
6db40918014a20b8016cb40918014a20b8016bb40918014a20b8016ab409
18014a20b80169b40918014a20b80168b40918014a20b80167b40918014a
20b80166b40918014a20b80165b40918014a20b80164b40918014a20b801
63b40918014a20b80162b40918014a20b80161b40918014a20b80160b409
18014a20b8015fb40918014a20b8015eb40918014a20b8015db40918014a
20b8015cb40918014a20b8015bb40918014a20b8015ab40918014a20b801
59b40918014a20b80158b40918014a20b80157b40918014a20b80156b409
18014a20b80155b40918014a20b80154b40918014a20b80153b40918014a
20b80152b40918014a20b80150b40918014a20b8014fb40918014a20b801
4eb40918014a20b8014cb40918014a20b8014bb40918014a20b8014ab409
18014a20b80149b40918014a20b80148b40918014a20b80147b40918014a
20b80146b40918014a20b80145b40918014a20b80144b40918014a20b801
43b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e1fb80281
b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8027db21e
3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279b21d411f
b80278b21d431fb80277b21d431fb80276b21d431fb80275b21d411fb802
74b21d431fb80273b21d431fb80272b21d411fb80271b21d421fb80270b2
1d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb8026cb21d43
1fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b21c451fb8
0267b21c451fb80266b21c441fb80265b21c451fb80264b21c451fb80263
b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8025fb21c
451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025bb21c451f
b8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c451fb802
56b21c451fb80255b21c451fb80254b21c451fb80253b21c451fb80252b2
1c451fb80251b21c451fb80250b21c451fb8024fb21c451fb8024eb21c45
1fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab21b491fb8
0249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b1fb80245
b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb80241b21b
491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023db21b4a1f
b8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b4c1fb802
38b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491fb80234b2
1b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb80230b21b4b
1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb21b4c1fb8
022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c1fb80227
b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb80223b21b
4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021fb21b4c1f
b8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b4c1fb802
1ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1fb80216b2
1a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb80212b21a4f
1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb21a4f1fb8
020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e1fb80209
b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb80205b219
511fb80204b219511fb80203b219501fb80202b219511fb80201b219511f
b80200b219511fb801ffb219511fb801feb219501fb801fdb219511fb801
fcb219511fb801fbb219511fb801fab219501fb801f9b219511fb801f8b2
19511fb801f7b219511fb801f6b219511fb801f5b218541fb801f4b21853
1fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b218531fb8
01efb218541fb801eeb218541fb801edb218541fb801ecb218531fb801eb
b218531fb801eab218541fb801e9b218541fb801e8b218541fb801e7b218
541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3b218541f
b801e2b218541fb801e1b218541fb801e0b218531fb801dfb218531fb801
deb218541fb801ddb218541fb801dcb218541fb801dbb218541fb801dab2
18531fb801d9b218541fb801d8b218541fb801d7b217571fb801d6b21756
1fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b217571fb8
01d1b217571fb801d0b217561fb801cfb217561fb801ceb217571fb801cd
b217571fb801ccb217571fb801cbb217571fb801cab217561fb801c9b217
561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5b217571f
b801c4b217571fb801c3b217561fb801c2b217571fb801c1b217571fb801
c0b217571fb801bfb217561fb801beb217561fb801bdb217571fb801bcb2
17571fb801bbb217571fb801bab217571fb801b9b217571fb801b8b21756
1fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b217571fb8
01b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b1fb801af
b2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb801abb216
5b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7b2165b1f
b801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b2165b1fb801
a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1fb8019eb2
163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb8019ab2165b
1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2165b1fb8
0195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f1fb80191
b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8018db216
5b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189b2165b1f
b80188b2165b1fb80187b2165b1fb80186b215611fb80185b215621fb801
84b215621fb80183b215661fb80182b215661fb80181b215551fb80180b2
15451fb8017fb215361fb8017eb215361fb8017db215611fb8017cb21562
1fb8017bb215621fb8017ab215641fb80179b215661fb80178b215661fb8
0177b215661fb80176b215661fb80175b215661fb80174b215661fb80173
b215451fb80172b215621fb80171b215621fb80170b215631fb8016fb215
641fb8016eb215661fb8016db215661fb8016cb215661fb8016bb215661f
b8016ab215661fb80169b215621fb80168b215621fb80167b215611fb801
66b215641fb80165b215641fb80164b215661fb80163b215661fb80162b2
15661fb80161b215661fb80160b215661fb8015fb215661fb8015eb21555
1fb8015db215451fb8015cb215451fb8015bb215361fb8015ab215611fb8
0159b215621fb80158b215621fb80157b215631fb80156b215641fb80155
b215661fb80154b215661fb80153b215661fb80152b215661fb80151b214
401fb80150b214551fb8014fb214561fb8014eb214831fb8014db2142d1f
b8014cb214401fb8014bb214401fb8014ab214411fb80149b214401fb801
48b214401fb80147b214411fb80146b2147e1fb80145b214871fb80144b2
147f1fb80143b214801fb80142b212461fb80141b212461fb80140b21246
1fb8013fb212461fb8013eb212441fb8013db212461fb8013cb211591fb8
013bb211591fb8013ab2115b1fb80139b2115b1fb80138b211471fb80137
b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb80133b211
2c1fb80132b211471fb80131b211551fb80130b211571fb8012fb211571f
b8012eb211581fb8012db211591fb8012cb211591fb8012bb2115a1fb801
2ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1fb80126b2
115b1fb80125b211561fb80124b211561fb80123b211571fb80122b21158
1fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2115b1fb8
011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b1fb80119
b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb80115b210
5f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111b2105e1f
b80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db2105f1fb801
0cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1fb80108b2
105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb80104b2105f
1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040ff0f621f
ff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f631ff80f
641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631ff10f641f
f00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f641fe90f
641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681fe20e681f
e10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e681fda0e
681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261fd30d261f
d20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d
6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671fc40d261f
c30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311fbd0c711f
bc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c711fb50c
721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791fae0b7a1f
ad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b
7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f9f0b791f
9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b
7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f900a4e1f
8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301381f8255
805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab7ddb7d40
12060a7c557a557bab7a557955775578ab7755ba028600660285403c5576
ab755504751475747503f47501ab75014475013075010200751075207503
0c7455725573ab7255007250728072b072043bb072e072020072010ab8ff
c0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d556a0325
1f6938675568ab67556638645565ab645563386255613860555f385d555e
ab5d555c385a555bab5a55593858555703251f5638545555ab5455533851
5552ab51554f384e554e03251f4d384b554cab4b554a38485549ab485547
3846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b0142301b
401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f19016f19
7f198f19030f18cf18024018292c460f17cf17df17ef1704134017292e46
0016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ffc0b31631
3546b8ffc0404d162326460f15010f151f1502451f15010011e011f01103
15bf10cf10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e
03400e3137460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c
5054460f0b1f0b02553f0b4f0b02400b3f4346400b2d3046000301200101
0001100120010308b8ffc0b301151f46b80100b316010501b80190b15453
2b2b4bb80800524bb008505bb00188b02553b00188b040515ab00688b000
555a5b58b101018e59b101024354b0144b515a58b101018e59858d8d0042
1d4bb01d5358b0a01d594bb0805358b0401d594bb0ff5358b0001db11600
42592b5e7375732b2b745e732b2b5e73742b73742b7374745e7301755e73
742b2b2b2b5e732b5e732b7374755e735e735e73755e732b5e73002b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e7375
5e732b2b5e735f73737373742b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2bb10002435458
41ff0284006402830064028200640281006402800064027f0064027e0064
027d0064027c0064027b0064027a00640279006402780064027700640276
00640275006402740064027300640271006402700064026f0064026e0064
026d0064026c0064026b0064026a00640269006402680064026700640266
0064026500640264006402630064026200640261006402600064025f0064
025e0064025d0064025c0064025b0064025a006402590064025800640257
006402560064025500640254006402530064025200640251006402500064
024f0064024e0064024d0064024c0064024b0064024a0064024900640248
006402470064024600640245006402440064024300640242006402410064
02400064023f0064023e0064023d0064023c0064023b0064023a00640239
006402380064023700640236006402350064023400640233006402320064
0231006402300064022f0064022e0064022d0064022c0064022b0064022a
006402290064022800640227006402260064022500640224006402230064
022200640221006402200064021f0064021e0064021d0064021c0064021b
0064021a0064021900640218006402170064021600640215006402140064
02130064021200640211006402100064020f0064020e0064020d0064020c
0064020b0064020a00640209006402080064020700640206006402050064
020441ff00640203006402020064020100640200006401ff006401fe0064
01fd006401fc006401fb006401fa006401f9006401f8006401f7006401f6
006401f5006401f4006401f3006401f2006401f1006401f0006401ef0064
01ee006401ed006401ec006401eb006401ea006401e9006401e8006401e7
006401e6006401e5006401e4006401e3006401e2006401e1006401e00064
01df006401de006401dd006401dc006401db006401da006401d9006401d8
006401d7006401d6006401d5006401d4006401d3006401d2006401d10064
01d0006401cf006401ce006401cd006401cc006401cb006401ca006401c9
006401c8006401c7006401c6006401c5006401c4006401c3006401c20064
01c1006401c0006401bf006401be006401bd006401bc006401bb006401ba
006401b9006401b8006401b7006401b6006401b5006401b4006401b30064
01b2006401b1006401b0006401af006401ae006401ad006401ac006401ab
006401aa006401a9006401a8006401a7006401a6006401a5006401a40064
01a3006401a2006401a1006401a00064019f0064019e0064019d0064019c
0064019b0064019a00640199006401980064019700640196006401950064
0194006401930064019200640191006401900064018f0064018e0064018d
0064018c0064018b0064018a006401890064018800640187006401860064
0185006441800184006401830064018200640181006401800064017f0064
017e0064017d0064017c0064017b0064017a006401790064017800640177
006401760064017500640174006401730064017200640171006401700064
016f0064016e0064016d0064016c0064016b0064016a0064016900640168
006401670064016600640165006401640064016300640162006401610064
01600064015f0064015e0064015d0064015c0064015b0064015a00640159
006401580064015700640156006401550064015400640153006401520064
01500064014f0064014e0064014c0064014b0064014a0064014900640148
006401470064014600640145006401440064014300642b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b185f5e00>
[6163 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3688 856 <00010097fff7016e00e0000b0017b10006b8ffc0b60c014d0609034c003f
cd012f2bc13130251406232226353436333216016e2f3e3c2e2f3e3c2e6d
472f2e45472f2e00>PBAAAA+Calibri AddT42Char 
2 4692 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+Calibri AddT42Char 
2 5050 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>PBAAAA+Calibri AddT42Char 
2 5416 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>PBAAAA+Calibri AddT42Char 
2 5736 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>PBAAAA+Calibri AddT42Char 
2 3756 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>PBAAAA+Calibri AddT42Char 
2 6130 1010 <ffff006bffed03bd0520020603ca0000>PBAAAA+Calibri AddT42Char 
2 4104 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>PBAAAA+Calibri AddT42Char 
2 6146 1012 <ffff0052ffed03ba0521020603cc0000>PBAAAA+Calibri AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/period 856 def
/zero 1004 def
/one 1005 def
/two 1006 def
/four 1008 def
/six 1010 def
/eight 1012 def
end
PBAAAA+Calibri /Encoding get
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
pop
end
%ADOEndSubsetFont
/AQWKJZ+Calibri /PBAAAA+Calibri findfont ct_VMDictPut
/AQWKJZ+Calibri*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
AQWKJZ+Calibri nf
AQWKJZ+Calibri*1 [9.96 0 0 -9.96 0 0 ]msf
68.1485 98.5207 mo
(0)sh
60.5092 84.009 mo
(0.2)
[5.03979 2.51987 0 ]xsh
60.5092 69.4973 mo
(0.4)
[5.03979 2.51987 0 ]xsh
60.5092 54.9855 mo
(0.6)
[5.03979 2.51987 0 ]xsh
60.5092 40.4738 mo
(0.8)
[5.03979 2.51987 0 ]xsh
68.1485 25.9621 mo
(1)sh
97.4601 109.6 mo
97.2541 109.705 97.0401 109.869 96.8171 110.091 cv
96.6981 110.21 96.5911 110.34 96.4951 110.478 cv
96.4011 110.617 96.3211 110.752 96.2551 110.884 cv
96.1891 111.016 96.1391 111.14 96.1041 111.255 cv
96.0681 111.371 96.0501 111.459 96.0491 111.521 cv
96.0471 111.581 96.0601 111.632 96.0851 111.674 cv
96.1101 111.715 96.1511 111.764 96.2081 111.821 cv
96.2431 111.855 96.2761 111.885 96.3101 111.908 cv
96.3431 111.933 96.3741 111.949 96.4031 111.957 cv
96.4311 111.965 96.4571 111.967 96.4801 111.962 cv
96.5031 111.957 96.5241 111.946 96.5421 111.927 cv
96.5701 111.9 96.5951 111.842 96.6181 111.752 cv
96.6411 111.663 96.6731 111.557 96.7181 111.432 cv
96.7611 111.309 96.8221 111.175 96.8991 111.03 cv
96.9781 110.886 97.0871 110.744 97.2261 110.603 cv
97.3571 110.473 97.4831 110.378 97.6031 110.32 cv
97.7231 110.261 97.8421 110.234 97.9591 110.239 cv
98.0761 110.243 98.1931 110.279 98.3101 110.346 cv
98.4271 110.413 98.5451 110.505 98.6641 110.624 cv
98.9051 110.865 li
98.4781 111.292 li
98.2381 111.532 98.0421 111.77 97.8921 112.005 cv
97.7421 112.24 97.6431 112.466 97.5941 112.684 cv
97.5461 112.902 97.5511 113.111 97.6081 113.31 cv
97.6651 113.51 97.7811 113.697 97.9551 113.87 cv
98.1041 114.02 98.2631 114.127 98.4321 114.192 cv
98.6001 114.257 98.7711 114.284 98.9441 114.271 cv
99.1171 114.258 99.2911 114.208 99.4651 114.118 cv
99.6391 114.029 99.8081 113.903 99.9701 113.74 cv
100.156 113.555 100.292 113.339 100.378 113.092 cv
100.464 112.845 100.502 112.583 100.493 112.303 cv
100.803 112.612 li
100.83 112.639 100.859 112.652 100.889 112.65 cv
100.919 112.647 100.955 112.632 100.997 112.603 cv
101.039 112.574 101.091 112.53 101.15 112.471 cv
101.212 112.409 101.255 112.358 101.281 112.32 cv
101.306 112.281 101.321 112.245 101.326 112.214 cv
101.33 112.181 101.318 112.151 101.291 112.124 cv
99.2031 110.036 li
99.0111 109.844 98.8211 109.697 98.6331 109.596 cv
98.4451 109.496 98.2541 109.444 98.0601 109.443 cv
98.0571 109.443 98.0541 109.443 98.0511 109.443 cv
97.8601 109.443 97.6631 109.496 97.4601 109.6 cv
98.5091 113.262 mo
98.4151 113.168 98.3501 113.067 98.3131 112.96 cv
98.2761 112.852 98.2701 112.734 98.2941 112.607 cv
98.3191 112.48 98.3741 112.346 98.4631 112.205 cv
98.5511 112.063 98.6731 111.915 98.8291 111.759 cv
99.3141 111.274 li
99.9701 111.931 li
99.9861 112.227 99.9691 112.476 99.9171 112.679 cv
99.8661 112.882 99.7651 113.058 99.6161 113.207 cv
99.4331 113.391 99.2431 113.485 99.0461 113.492 cv
99.0371 113.493 99.0291 113.493 99.0211 113.493 cv
98.8331 113.493 98.6631 113.415 98.5091 113.262 cv
95.0961 111.991 mo
95.0711 111.994 95.0351 112.006 94.9901 112.027 cv
94.9461 112.05 94.8991 112.077 94.8481 112.108 cv
94.7981 112.141 94.7521 112.174 94.7111 112.208 cv
94.6691 112.242 94.6341 112.275 94.6041 112.304 cv
94.5381 112.371 94.4801 112.446 94.4321 112.528 cv
94.3841 112.61 94.3491 112.708 94.3271 112.818 cv
94.3061 112.93 94.2971 113.061 94.2991 113.214 cv
94.3031 113.366 94.3241 113.547 94.3631 113.756 cv
93.9131 113.305 li
93.8941 113.287 93.8751 113.276 93.8551 113.271 cv
93.8341 113.267 93.8091 113.268 93.7811 113.276 cv
93.7521 113.284 93.7191 113.303 93.6831 113.332 cv
93.6461 113.363 93.6021 113.402 93.5511 113.453 cv
93.4991 113.506 93.4591 113.55 93.4301 113.585 cv
93.4011 113.621 93.3811 113.654 93.3711 113.685 cv
93.3601 113.717 93.3591 113.742 93.3641 113.761 cv
93.3701 113.78 93.3821 113.799 93.4001 113.817 cv
96.4951 116.913 li
96.5141 116.93 96.5331 116.942 96.5541 116.947 cv
96.5741 116.951 96.6011 116.948 96.6311 116.935 cv
96.6621 116.922 96.6991 116.9 96.7391 116.867 cv
96.7811 116.836 96.8291 116.792 96.8841 116.737 cv
96.9421 116.68 96.9861 116.631 97.0181 116.589 cv
97.0501 116.548 97.0721 116.513 97.0841 116.482 cv
97.0951 116.453 97.0991 116.427 97.0951 116.406 cv
97.0921 116.383 97.0811 116.363 97.0631 116.345 cv
95.0271 114.31 li
94.9811 114.103 94.9481 113.923 94.9271 113.77 cv
94.9071 113.616 94.9001 113.483 94.9091 113.369 cv
94.9171 113.256 94.9361 113.159 94.9691 113.082 cv
95.0001 113.004 95.0451 112.936 95.1031 112.879 cv
95.1511 112.831 95.2001 112.79 95.2501 112.758 cv
95.3011 112.727 95.3481 112.699 95.3921 112.676 cv
95.4351 112.653 95.4761 112.634 95.5111 112.618 cv
95.5481 112.601 95.5761 112.584 95.5941 112.565 cv
95.6121 112.547 95.6221 112.528 95.6221 112.507 cv
95.6221 112.487 95.6161 112.463 95.6031 112.437 cv
95.5911 112.411 95.5681 112.379 95.5361 112.342 cv
95.5031 112.305 95.4631 112.262 95.4121 112.212 cv
95.3591 112.159 95.3171 112.117 95.2851 112.088 cv
95.2531 112.058 95.2271 112.037 95.2071 112.025 cv
95.1881 112.012 95.1701 112.002 95.1561 111.997 cv
95.1451 111.993 95.1311 111.991 95.1141 111.991 cv
95.1081 111.991 95.1021 111.991 95.0961 111.991 cv
92.4911 114.572 mo
92.4701 114.578 92.4501 114.59 92.4311 114.608 cv
91.6371 115.402 li
90.9011 114.667 li
90.8851 114.651 90.8651 114.64 90.8421 114.635 cv
90.8191 114.631 90.7931 114.634 90.7611 114.644 cv
90.7311 114.654 90.6951 114.676 90.6531 114.707 cv
90.6121 114.74 90.5621 114.785 90.5051 114.842 cv
90.4501 114.897 90.4071 114.945 90.3741 114.986 cv
90.3431 115.028 90.3201 115.065 90.3101 115.096 cv
90.2981 115.129 90.2951 115.156 90.3001 115.177 cv
90.3061 115.199 90.3181 115.218 90.3331 115.234 cv
91.0691 115.97 li
90.6391 116.399 li
90.6211 116.418 90.6081 116.439 90.6011 116.462 cv
90.5951 116.485 90.5971 116.51 90.6061 116.539 cv
90.6171 116.568 90.6341 116.6 90.6581 116.635 cv
90.6821 116.671 90.7161 116.711 90.7591 116.754 cv
90.8421 116.837 90.9121 116.885 90.9691 116.902 cv
91.0271 116.918 91.0731 116.909 91.1071 116.875 cv
91.5411 116.441 li
93.3491 118.25 li
93.5281 118.429 93.7001 118.568 93.8651 118.666 cv
94.0301 118.765 94.1921 118.82 94.3511 118.833 cv
94.5111 118.846 94.6691 118.816 94.8261 118.743 cv
94.9831 118.671 95.1421 118.555 95.3031 118.395 cv
95.3551 118.342 95.4041 118.286 95.4501 118.226 cv
95.4961 118.166 95.5381 118.108 95.5751 118.05 cv
95.6101 117.993 95.6391 117.939 95.6601 117.885 cv
95.6811 117.832 95.6911 117.788 95.6911 117.751 cv
95.6911 117.714 95.6761 117.672 95.6471 117.624 cv
95.6171 117.576 95.5681 117.518 95.5021 117.452 cv
95.4601 117.411 95.4241 117.379 95.3921 117.356 cv
95.3591 117.333 95.3321 117.317 95.3111 117.306 cv
95.2891 117.296 95.2701 117.293 95.2541 117.298 cv
95.2381 117.302 95.2241 117.31 95.2131 117.321 cv
95.1951 117.34 95.1791 117.365 95.1671 117.398 cv
95.1541 117.432 95.1371 117.47 95.1161 117.514 cv
95.0961 117.558 95.0711 117.605 95.0391 117.657 cv
95.0081 117.708 94.9671 117.76 94.9141 117.813 cv
94.7511 117.976 94.5841 118.035 94.4121 117.989 cv
94.2401 117.943 94.0471 117.813 93.8341 117.6 cv
92.1081 115.874 li
92.9021 115.079 li
92.9371 115.045 92.9461 114.999 92.9291 114.941 cv
92.9131 114.885 92.8651 114.815 92.7821 114.732 cv
92.7391 114.689 92.6991 114.654 92.6651 114.629 cv
92.6311 114.604 92.5981 114.586 92.5691 114.577 cv
92.5511 114.572 92.5341 114.569 92.5191 114.569 cv
92.5091 114.569 92.5001 114.57 92.4911 114.572 cv
90.0611 117.253 mo
90.0191 117.259 89.9621 117.273 89.8911 117.296 cv
89.8201 117.319 89.7411 117.353 89.6531 117.399 cv
89.5671 117.445 89.4751 117.502 89.3791 117.571 cv
89.2831 117.64 89.1931 117.715 89.1111 117.798 cv
88.9231 117.986 88.7831 118.176 88.6921 118.367 cv
88.6021 118.559 88.5521 118.743 88.5411 118.921 cv
88.5311 119.099 88.5581 119.266 88.6221 119.424 cv
88.6861 119.583 88.7801 119.722 88.9011 119.844 cv
89.0381 119.981 89.1791 120.078 89.3221 120.131 cv
89.4651 120.185 89.6091 120.211 89.7531 120.208 cv
89.8981 120.206 90.0411 120.183 90.1841 120.14 cv
90.3261 120.097 90.4651 120.045 90.6011 119.987 cv
90.7381 119.928 90.8691 119.871 90.9971 119.815 cv
91.1241 119.758 91.2471 119.717 91.3661 119.689 cv
91.4861 119.662 91.5971 119.656 91.7021 119.67 cv
91.8061 119.685 91.9021 119.737 91.9891 119.823 cv
92.0741 119.909 92.1311 119.997 92.1631 120.09 cv
92.1931 120.183 92.2001 120.278 92.1831 120.376 cv
92.1661 120.473 92.1281 120.571 92.0721 120.669 cv
92.0141 120.768 91.9381 120.865 91.8411 120.962 cv
91.7131 121.09 91.5841 121.188 91.4541 121.256 cv
91.3251 121.323 91.2051 121.375 91.0961 121.411 cv
90.9871 121.446 90.8931 121.473 90.8131 121.492 cv
90.7331 121.51 90.6791 121.531 90.6541 121.556 cv
90.6381 121.573 90.6281 121.591 90.6241 121.611 cv
90.6191 121.632 90.6231 121.655 90.6341 121.681 cv
90.6451 121.706 90.6641 121.736 90.6891 121.77 cv
90.7151 121.804 90.7491 121.844 90.7921 121.887 cv
90.8631 121.958 90.9251 122.008 90.9771 122.038 cv
91.0301 122.068 91.0811 122.082 91.1291 122.079 cv
91.1771 122.077 91.2431 122.063 91.3271 122.036 cv
91.4101 122.01 91.5051 121.97 91.6111 121.917 cv
91.7161 121.865 91.8271 121.798 91.9441 121.715 cv
92.0611 121.632 92.1741 121.536 92.2841 121.426 cv
92.4631 121.247 92.6051 121.061 92.7111 120.869 cv
92.8161 120.676 92.8811 120.484 92.9031 120.291 cv
92.9271 120.098 92.9051 119.911 92.8401 119.729 cv
92.7751 119.547 92.6631 119.377 92.5051 119.218 cv
92.3711 119.085 92.2351 118.993 92.0931 118.941 cv
91.9531 118.89 91.8111 118.866 91.6691 118.871 cv
91.5271 118.875 91.3841 118.901 91.2411 118.948 cv
91.0981 118.995 90.9571 119.048 90.8221 119.107 cv
90.6851 119.165 90.5521 119.223 90.4211 119.28 cv
90.2901 119.337 90.1651 119.38 90.0461 119.407 cv
89.9271 119.435 89.8141 119.441 89.7071 119.426 cv
89.6001 119.412 89.5021 119.36 89.4131 119.27 cv
89.3491 119.206 89.3021 119.134 89.2701 119.055 cv
89.2391 118.976 89.2281 118.892 89.2341 118.805 cv
89.2411 118.719 89.2701 118.627 89.3221 118.532 cv
89.3731 118.437 89.4471 118.342 89.5441 118.245 cv
89.6521 118.137 89.7601 118.055 89.8691 117.996 cv
89.9771 117.938 90.0771 117.892 90.1681 117.858 cv
90.2581 117.825 90.3361 117.802 90.4001 117.787 cv
90.4641 117.774 90.5071 117.757 90.5271 117.736 cv
90.5411 117.722 90.5501 117.705 90.5531 117.686 cv
90.5561 117.667 90.5531 117.644 90.5431 117.617 cv
90.5331 117.591 90.5151 117.562 90.4901 117.53 cv
90.4641 117.497 90.4321 117.462 90.3931 117.423 cv
90.3561 117.387 90.3241 117.357 90.2951 117.335 cv
90.2661 117.314 90.2421 117.296 90.2211 117.282 cv
90.2011 117.269 90.1791 117.259 90.1571 117.253 cv
90.1471 117.25 90.1331 117.249 90.1171 117.249 cv
90.1011 117.249 90.0821 117.25 90.0611 117.253 cv
87.3511 119.699 mo
87.3191 119.714 87.2821 119.74 87.2401 119.776 cv
87.1961 119.811 87.1471 119.858 87.0891 119.915 cv
87.0341 119.97 86.9891 120.019 86.9531 120.062 cv
86.9181 120.104 86.8911 120.144 86.8731 120.183 cv
86.8541 120.223 86.8431 120.26 86.8371 120.295 cv
86.8311 120.331 86.8311 120.369 86.8361 120.411 cv
86.9531 122.866 li
84.1531 120.066 li
84.1351 120.048 84.1141 120.036 84.0911 120.032 cv
84.0681 120.027 84.0421 120.031 84.0121 120.043 cv
83.9831 120.053 83.9471 120.076 83.9051 120.107 cv
83.8641 120.14 83.8151 120.185 83.7581 120.242 cv
83.7031 120.296 83.6591 120.345 83.6271 120.386 cv
83.5951 120.428 83.5721 120.464 83.5601 120.494 cv
83.5471 120.525 83.5431 120.552 83.5501 120.574 cv
83.5551 120.595 83.5671 120.615 83.5861 120.634 cv
88.1801 125.228 li
88.1981 125.246 88.2181 125.258 88.2391 125.263 cv
88.2591 125.267 88.2851 125.263 88.3161 125.25 cv
88.3471 125.237 88.3831 125.216 88.4241 125.183 cv
88.4651 125.151 88.5131 125.108 88.5681 125.053 cv
88.6261 124.995 88.6711 124.946 88.7021 124.904 cv
88.7351 124.864 88.7561 124.828 88.7681 124.798 cv
88.7801 124.769 88.7831 124.742 88.7801 124.721 cv
88.7771 124.699 88.7651 124.679 88.7471 124.661 cv
87.0311 122.945 li
90.0501 123.35 li
90.0841 123.357 90.1181 123.36 90.1501 123.357 cv
90.1831 123.355 90.2161 123.344 90.2521 123.325 cv
90.2871 123.305 90.3271 123.277 90.3711 123.24 cv
90.4141 123.203 90.4671 123.155 90.5281 123.093 cv
90.5891 123.033 90.6351 122.981 90.6701 122.938 cv
90.7041 122.895 90.7271 122.857 90.7401 122.826 cv
90.7521 122.795 90.7571 122.768 90.7521 122.745 cv
90.7481 122.722 90.7361 122.701 90.7171 122.683 cv
90.6971 122.663 90.6691 122.646 90.6321 122.636 cv
90.5951 122.624 90.5431 122.613 90.4731 122.604 cv
87.5821 122.23 li
87.5821 119.988 li
87.5791 119.917 87.5721 119.859 87.5591 119.817 cv
87.5471 119.774 87.5271 119.739 87.4991 119.712 cv
87.4781 119.692 87.4571 119.68 87.4331 119.678 cv
87.4301 119.678 87.4271 119.678 87.4241 119.678 cv
87.4031 119.678 87.3781 119.685 87.3511 119.699 cv
82.7021 121.892 mo
82.6061 121.894 82.4911 121.961 82.3561 122.097 cv
82.2211 122.232 82.1531 122.348 82.1521 122.446 cv
82.1501 122.544 82.2161 122.659 82.3491 122.791 cv
82.4801 122.923 82.5931 122.987 82.6881 122.986 cv
82.7831 122.985 82.8971 122.918 83.0301 122.785 cv
83.1651 122.65 83.2341 122.533 83.2361 122.434 cv
83.2391 122.336 83.1731 122.22 83.0401 122.087 cv
82.9111 121.957 82.7991 121.892 82.7041 121.892 cv
82.7031 121.892 82.7021 121.892 82.7021 121.892 cv
83.8811 123.178 mo
83.8501 123.191 83.8141 123.213 83.7731 123.246 cv
83.7311 123.277 83.6841 123.321 83.6291 123.376 cv
83.5731 123.431 83.5301 123.48 83.4971 123.521 cv
83.4661 123.562 83.4431 123.599 83.4311 123.629 cv
83.4181 123.66 83.4141 123.687 83.4191 123.71 cv
83.4241 123.733 83.4341 123.752 83.4501 123.769 cv
86.6791 126.998 li
86.8461 127.164 86.9631 127.298 87.0301 127.397 cv
87.0961 127.495 87.1381 127.587 87.1551 127.673 cv
87.1721 127.759 87.1651 127.84 87.1341 127.918 cv
87.1041 127.994 87.0501 128.071 86.9741 128.146 cv
86.9221 128.198 86.8721 128.243 86.8271 128.277 cv
86.7811 128.311 86.7511 128.335 86.7371 128.349 cv
86.7211 128.365 86.7121 128.382 86.7091 128.4 cv
86.7081 128.419 86.7111 128.441 86.7221 128.468 cv
86.7321 128.494 86.7501 128.523 86.7771 128.557 cv
86.8031 128.59 86.8371 128.628 86.8781 128.668 cv
86.9081 128.699 86.9341 128.723 86.9551 128.743 cv
86.9781 128.762 87.0001 128.779 87.0241 128.794 cv
87.0491 128.81 87.0731 128.819 87.0981 128.823 cv
87.1231 128.828 87.1561 128.822 87.1951 128.806 cv
87.2331 128.79 87.2841 128.761 87.3441 128.719 cv
87.4051 128.676 87.4721 128.618 87.5461 128.545 cv
87.7091 128.382 87.8221 128.219 87.8881 128.054 cv
87.9521 127.891 87.9741 127.724 87.9521 127.554 cv
87.9281 127.385 87.8631 127.212 87.7571 127.037 cv
87.6501 126.862 87.4831 126.659 87.2531 126.43 cv
84.0201 123.197 li
84.0041 123.182 83.9851 123.171 83.9621 123.167 cv
83.9561 123.165 83.9491 123.165 83.9421 123.165 cv
83.9241 123.165 83.9041 123.169 83.8811 123.178 cv
81.0221 123.572 mo
80.9261 123.574 80.8121 123.642 80.6791 123.775 cv
80.5441 123.91 80.4741 124.027 80.4721 124.125 cv
80.4701 124.224 80.5361 124.339 80.6681 124.472 cv
80.7991 124.603 80.9131 124.668 81.0091 124.665 cv
81.1051 124.663 81.2201 124.596 81.3531 124.463 cv
81.4881 124.327 81.5571 124.211 81.5591 124.112 cv
81.5621 124.013 81.4961 123.897 81.3631 123.764 cv
81.2341 123.635 81.1221 123.572 81.0261 123.572 cv
81.0251 123.572 81.0241 123.572 81.0221 123.572 cv
82.2051 124.854 mo
82.1751 124.866 82.1401 124.887 82.0991 124.92 cv
82.0571 124.952 82.0081 124.996 81.9511 125.054 cv
81.8961 125.109 81.8521 125.157 81.8201 125.198 cv
81.7881 125.239 81.7661 125.275 81.7531 125.307 cv
81.7411 125.337 81.7371 125.364 81.7431 125.386 cv
81.7491 125.408 81.7591 125.426 81.7761 125.443 cv
84.8711 128.538 li
84.8891 128.556 84.9091 128.567 84.9291 128.572 cv
84.9501 128.577 84.9751 128.572 85.0071 128.559 cv
85.0371 128.547 85.0731 128.525 85.1151 128.493 cv
85.1561 128.46 85.2041 128.417 85.2591 128.362 cv
85.3161 128.305 85.3611 128.255 85.3931 128.214 cv
85.4251 128.173 85.4471 128.137 85.4591 128.108 cv
85.4701 128.078 85.4741 128.052 85.4701 128.03 cv
85.4681 128.009 85.4571 127.989 85.4381 127.97 cv
82.3431 124.875 li
82.3271 124.859 82.3081 124.849 82.2841 124.844 cv
82.2781 124.843 82.2711 124.842 82.2641 124.842 cv
82.2471 124.842 82.2271 124.846 82.2051 124.854 cv
79.0651 125.02 mo
79.0361 125.032 79.0011 125.055 78.9591 125.085 cv
78.9161 125.116 78.8661 125.16 78.8091 125.218 cv
78.7541 125.273 78.7111 125.321 78.6811 125.363 cv
78.6521 125.404 78.6291 125.44 78.6151 125.471 cv
78.6001 125.501 78.5961 125.528 78.6021 125.552 cv
78.6101 125.574 78.6211 125.594 78.6361 125.61 cv
80.4361 127.408 li
80.1351 127.401 79.8701 127.433 79.6411 127.505 cv
79.4111 127.576 79.2061 127.702 79.0251 127.883 cv
78.8081 128.1 78.6561 128.333 78.5721 128.581 cv
78.4871 128.828 78.4641 129.084 78.5021 129.348 cv
78.5421 129.611 78.6401 129.879 78.7971 130.151 cv
78.9541 130.422 79.1661 130.691 79.4311 130.957 cv
79.6561 131.182 79.8931 131.373 80.1411 131.53 cv
80.3911 131.687 80.6401 131.79 80.8891 131.841 cv
81.1391 131.891 81.3891 131.88 81.6371 131.808 cv
81.8861 131.736 82.1241 131.587 82.3511 131.359 cv
82.5601 131.151 82.7021 130.909 82.7791 130.636 cv
82.8561 130.362 82.8871 130.055 82.8741 129.716 cv
83.2831 130.125 li
83.3011 130.143 83.3221 130.155 83.3441 130.16 cv
83.3681 130.164 83.3931 130.16 83.4221 130.148 cv
83.4511 130.134 83.4831 130.115 83.5201 130.088 cv
83.5571 130.06 83.5991 130.022 83.6481 129.974 cv
83.6941 129.928 83.7301 129.887 83.7581 129.85 cv
83.7851 129.813 83.8041 129.782 83.8161 129.754 cv
83.8281 129.726 83.8301 129.702 83.8241 129.68 cv
83.8191 129.658 83.8071 129.638 83.7881 129.62 cv
79.2081 125.039 li
79.1921 125.023 79.1711 125.012 79.1461 125.008 cv
79.1391 125.007 79.1321 125.006 79.1251 125.006 cv
79.1061 125.006 79.0861 125.011 79.0651 125.02 cv
80.9741 131 mo
80.7981 130.944 80.6241 130.853 80.4511 130.728 cv
80.2781 130.603 80.1131 130.463 79.9581 130.307 cv
79.8111 130.16 79.6811 130.002 79.5671 129.831 cv
79.4541 129.66 79.3731 129.487 79.3231 129.312 cv
79.2741 129.136 79.2651 128.963 79.2971 128.794 cv
79.3301 128.625 79.4181 128.468 79.5621 128.323 cv
79.7181 128.167 79.9171 128.067 80.1601 128.024 cv
80.4031 127.981 80.6971 127.977 81.0401 128.014 cv
82.2791 129.251 li
82.3011 129.453 82.3111 129.633 82.3081 129.79 cv
82.3051 129.947 82.2911 130.086 82.2651 130.207 cv
82.2401 130.329 82.2021 130.435 82.1531 130.526 cv
82.1041 130.616 82.0411 130.7 81.9661 130.775 cv
81.8171 130.924 81.6581 131.013 81.4901 131.042 cv
81.4321 131.051 81.3751 131.056 81.3171 131.056 cv
81.2041 131.056 81.0901 131.038 80.9741 131 cv
f
130.983 107.969 mo
130.954 107.972 130.904 107.989 130.833 108.018 cv
130.762 108.048 130.682 108.091 130.591 108.147 cv
130.5 108.204 130.406 108.271 130.309 108.347 cv
130.211 108.423 130.12 108.504 130.035 108.589 cv
129.783 108.842 129.596 109.098 129.475 109.356 cv
129.353 109.615 129.283 109.873 129.265 110.126 cv
129.247 110.381 129.272 110.633 129.34 110.883 cv
129.41 111.133 129.508 111.375 129.637 111.609 cv
129.764 111.843 129.916 112.068 130.09 112.283 cv
130.265 112.498 130.447 112.701 130.637 112.891 cv
130.853 113.107 131.063 113.3 131.27 113.469 cv
131.476 113.639 131.68 113.781 131.88 113.897 cv
132.081 114.013 132.278 114.098 132.472 114.152 cv
132.665 114.206 132.858 114.222 133.048 114.201 cv
133.238 114.181 133.427 114.122 133.616 114.026 cv
133.803 113.93 133.99 113.789 134.175 113.603 cv
134.435 113.344 134.617 113.077 134.724 112.804 cv
134.831 112.53 134.876 112.261 134.862 111.999 cv
134.847 111.736 134.778 111.484 134.655 111.242 cv
134.533 111 134.374 110.782 134.179 110.587 cv
133.995 110.404 133.804 110.256 133.603 110.142 cv
133.402 110.028 133.193 109.965 132.976 109.951 cv
132.758 109.937 132.534 109.98 132.303 110.08 cv
132.073 110.18 131.837 110.35 131.597 110.591 cv
131.484 110.703 131.387 110.818 131.306 110.933 cv
131.224 111.049 131.153 111.165 131.093 111.28 cv
131.032 111.396 130.981 111.509 130.942 111.618 cv
130.901 111.727 130.869 111.827 130.844 111.922 cv
130.639 111.704 130.464 111.474 130.317 111.234 cv
130.17 110.993 130.072 110.751 130.024 110.507 cv
129.974 110.262 129.982 110.02 130.049 109.779 cv
130.115 109.539 130.255 109.312 130.468 109.099 cv
130.585 108.982 130.696 108.887 130.8 108.815 cv
130.905 108.742 130.997 108.685 131.079 108.643 cv
131.16 108.6 131.23 108.566 131.291 108.538 cv
131.35 108.51 131.393 108.484 131.418 108.459 cv
131.438 108.438 131.45 108.417 131.454 108.395 cv
131.457 108.373 131.454 108.349 131.444 108.323 cv
131.433 108.297 131.414 108.268 131.385 108.237 cv
131.357 108.206 131.321 108.17 131.28 108.128 cv
131.248 108.097 131.22 108.071 131.196 108.051 cv
131.172 108.032 131.149 108.016 131.127 108.003 cv
131.105 107.991 131.083 107.981 131.06 107.974 cv
131.045 107.969 131.029 107.967 131.011 107.967 cv
131.002 107.967 130.993 107.968 130.983 107.969 cv
132.769 113.383 mo
132.577 113.335 132.362 113.23 132.124 113.068 cv
131.888 112.907 131.62 112.678 131.325 112.383 cv
131.343 112.282 131.371 112.177 131.408 112.069 cv
131.444 111.961 131.489 111.855 131.542 111.75 cv
131.594 111.645 131.655 111.542 131.726 111.442 cv
131.796 111.342 131.873 111.249 131.958 111.165 cv
132.109 111.014 132.256 110.907 132.401 110.845 cv
132.545 110.783 132.687 110.759 132.824 110.773 cv
132.962 110.787 133.098 110.835 133.233 110.917 cv
133.369 111 133.503 111.108 133.635 111.24 cv
133.757 111.362 133.859 111.498 133.942 111.646 cv
134.024 111.796 134.076 111.952 134.098 112.116 cv
134.12 112.28 134.104 112.443 134.052 112.606 cv
133.999 112.769 133.899 112.923 133.752 113.07 cv
133.608 113.214 133.456 113.315 133.297 113.371 cv
133.211 113.401 133.121 113.416 133.025 113.416 cv
132.944 113.416 132.858 113.405 132.769 113.383 cv
127.164 112 mo
126.971 112.017 126.778 112.074 126.588 112.17 cv
126.398 112.266 126.21 112.408 126.024 112.593 cv
125.763 112.855 125.579 113.12 125.471 113.388 cv
125.363 113.656 125.316 113.919 125.33 114.175 cv
125.344 114.432 125.41 114.678 125.531 114.912 cv
125.651 115.148 125.81 115.364 126.007 115.561 cv
126.198 115.751 126.395 115.904 126.6 116.02 cv
126.805 116.136 127.018 116.201 127.236 116.217 cv
127.456 116.231 127.683 116.188 127.919 116.087 cv
128.155 115.986 128.397 115.813 128.645 115.565 cv
128.865 115.344 129.032 115.122 129.147 114.897 cv
129.261 114.673 129.344 114.464 129.394 114.272 cv
129.601 114.487 129.774 114.715 129.914 114.956 cv
130.053 115.197 130.145 115.44 130.189 115.685 cv
130.232 115.93 130.217 116.175 130.144 116.421 cv
130.07 116.666 129.923 116.9 129.7 117.122 cv
129.584 117.239 129.469 117.336 129.359 117.413 cv
129.247 117.49 129.146 117.553 129.056 117.602 cv
128.965 117.651 128.889 117.691 128.826 117.719 cv
128.763 117.748 128.718 117.774 128.693 117.8 cv
128.674 117.819 128.662 117.837 128.655 117.855 cv
128.648 117.873 128.649 117.894 128.658 117.917 cv
128.667 117.94 128.685 117.968 128.711 118.001 cv
128.738 118.035 128.776 118.076 128.827 118.126 cv
128.887 118.186 128.939 118.228 128.985 118.254 cv
129.031 118.279 129.076 118.29 129.119 118.288 cv
129.163 118.286 129.22 118.269 129.291 118.24 cv
129.362 118.21 129.444 118.167 129.538 118.111 cv
129.63 118.055 129.729 117.987 129.835 117.907 cv
129.94 117.826 130.043 117.737 130.141 117.639 cv
130.397 117.381 130.589 117.122 130.715 116.861 cv
130.841 116.6 130.915 116.339 130.937 116.079 cv
130.959 115.819 130.936 115.562 130.87 115.31 cv
130.803 115.058 130.707 114.813 130.579 114.576 cv
130.452 114.338 130.301 114.11 130.127 113.89 cv
129.952 113.67 129.769 113.464 129.576 113.271 cv
129.373 113.067 129.169 112.882 128.964 112.717 cv
128.761 112.552 128.558 112.413 128.354 112.3 cv
128.152 112.185 127.951 112.104 127.752 112.051 cv
127.604 112.013 127.456 111.994 127.31 111.994 cv
127.261 111.994 127.213 111.996 127.164 112 cv
127.4 115.392 mo
127.258 115.379 127.117 115.33 126.975 115.246 cv
126.834 115.163 126.696 115.053 126.56 114.918 cv
126.439 114.796 126.337 114.662 126.254 114.516 cv
126.173 114.369 126.119 114.217 126.097 114.058 cv
126.074 113.9 126.088 113.742 126.139 113.582 cv
126.191 113.423 126.291 113.268 126.441 113.12 cv
126.585 112.975 126.74 112.876 126.905 112.82 cv
127.07 112.765 127.252 112.761 127.451 112.81 cv
127.651 112.858 127.871 112.963 128.11 113.125 cv
128.35 113.286 128.616 113.514 128.909 113.807 cv
128.878 114.009 128.807 114.216 128.698 114.428 cv
128.589 114.64 128.449 114.832 128.277 115.004 cv
128.126 115.155 127.977 115.262 127.831 115.322 cv
127.714 115.372 127.597 115.396 127.482 115.396 cv
127.454 115.396 127.427 115.395 127.4 115.392 cv
123.375 115.542 mo
123.084 115.633 122.798 115.821 122.516 116.102 cv
122.222 116.396 122.03 116.699 121.94 117.012 cv
121.849 117.324 121.844 117.645 121.923 117.972 cv
122.002 118.298 122.155 118.63 122.384 118.969 cv
122.611 119.306 122.895 119.646 123.234 119.985 cv
123.601 120.351 123.95 120.652 124.283 120.886 cv
124.616 121.12 124.937 121.275 125.248 121.352 cv
125.559 121.428 125.859 121.421 126.151 121.329 cv
126.442 121.238 126.727 121.052 127.007 120.772 cv
127.303 120.476 127.496 120.172 127.586 119.859 cv
127.676 119.547 127.683 119.226 127.605 118.898 cv
127.527 118.57 127.374 118.238 127.146 117.902 cv
126.918 117.567 126.633 117.228 126.291 116.886 cv
125.925 116.52 125.575 116.219 125.243 115.985 cv
124.91 115.751 124.589 115.597 124.278 115.519 cv
124.136 115.484 123.997 115.467 123.859 115.467 cv
123.695 115.467 123.533 115.492 123.375 115.542 cv
125.43 120.54 mo
125.209 120.468 124.965 120.332 124.697 120.134 cv
124.43 119.936 124.13 119.671 123.798 119.338 cv
123.551 119.09 123.332 118.846 123.141 118.606 cv
122.951 118.365 122.811 118.129 122.72 117.899 cv
122.629 117.668 122.6 117.447 122.629 117.234 cv
122.659 117.02 122.771 116.816 122.966 116.622 cv
123.077 116.512 123.19 116.426 123.307 116.367 cv
123.423 116.308 123.548 116.275 123.68 116.269 cv
123.812 116.263 123.95 116.284 124.097 116.333 cv
124.244 116.38 124.4 116.457 124.567 116.561 cv
124.733 116.666 124.913 116.798 125.105 116.958 cv
125.298 117.119 125.505 117.31 125.728 117.532 cv
125.893 117.698 126.047 117.862 126.189 118.025 cv
126.33 118.188 126.453 118.348 126.556 118.506 cv
126.659 118.664 126.742 118.82 126.803 118.973 cv
126.866 119.127 126.9 119.277 126.907 119.424 cv
126.914 119.571 126.889 119.714 126.833 119.853 cv
126.777 119.991 126.685 120.124 126.556 120.253 cv
126.391 120.418 126.218 120.525 126.035 120.574 cv
125.961 120.594 125.884 120.604 125.804 120.604 cv
125.686 120.604 125.562 120.583 125.43 120.54 cv
119.94 118.901 mo
119.907 118.905 119.867 118.92 119.823 118.946 cv
119.779 118.972 119.725 119.01 119.662 119.062 cv
119.599 119.114 119.53 119.178 119.452 119.255 cv
119.382 119.325 119.323 119.387 119.275 119.442 cv
119.227 119.497 119.19 119.547 119.164 119.592 cv
119.138 119.636 119.121 119.675 119.113 119.711 cv
119.104 119.747 119.103 119.781 119.11 119.81 cv
120.227 124.1 li
120.241 124.146 120.255 124.187 120.27 124.225 cv
120.285 124.263 120.304 124.299 120.325 124.335 cv
120.348 124.37 120.375 124.406 120.406 124.443 cv
120.439 124.479 120.476 124.519 120.52 124.563 cv
120.575 124.618 120.622 124.659 120.663 124.688 cv
120.702 124.717 120.739 124.733 120.773 124.737 cv
120.806 124.74 120.835 124.737 120.86 124.725 cv
120.885 124.714 120.911 124.695 120.938 124.668 cv
122.759 122.847 li
123.694 123.782 li
123.712 123.801 123.732 123.812 123.752 123.816 cv
123.774 123.821 123.8 123.816 123.832 123.803 cv
123.863 123.79 123.9 123.767 123.942 123.733 cv
123.985 123.7 124.034 123.655 124.091 123.598 cv
124.15 123.54 124.196 123.489 124.229 123.446 cv
124.263 123.404 124.286 123.366 124.301 123.334 cv
124.315 123.3 124.321 123.274 124.318 123.251 cv
124.315 123.229 124.304 123.21 124.285 123.191 cv
123.35 122.256 li
123.852 121.753 li
123.894 121.712 123.904 121.658 123.883 121.591 cv
123.862 121.526 123.815 121.455 123.739 121.378 cv
123.656 121.296 123.583 121.247 123.518 121.23 cv
123.455 121.214 123.403 121.226 123.364 121.265 cv
122.861 121.767 li
120.021 118.926 li
120.003 118.909 119.981 118.9 119.955 118.9 cv
119.95 118.9 119.945 118.901 119.94 118.901 cv
119.822 119.924 mo
119.828 119.917 li
122.27 122.358 li
120.833 123.796 li
cp
117.12 121.655 mo
117.097 121.661 117.075 121.673 117.057 121.691 cv
113.962 124.786 li
113.943 124.804 113.932 124.826 113.926 124.85 cv
113.92 124.874 113.923 124.901 113.934 124.93 cv
113.946 124.961 113.966 124.995 113.993 125.034 cv
114.021 125.073 114.056 125.114 114.1 125.158 cv
114.143 125.201 114.184 125.236 114.221 125.262 cv
114.259 125.289 114.293 125.308 114.321 125.317 cv
114.35 125.328 114.376 125.33 114.401 125.325 cv
114.425 125.319 114.446 125.307 114.464 125.289 cv
115.715 124.037 li
119.575 127.895 li
119.593 127.914 119.613 127.925 119.636 127.929 cv
119.659 127.934 119.686 127.929 119.717 127.914 cv
119.748 127.899 119.786 127.875 119.83 127.842 cv
119.875 127.809 119.925 127.764 119.98 127.71 cv
120.037 127.652 120.082 127.602 120.114 127.558 cv
120.146 127.514 120.17 127.477 120.185 127.447 cv
120.199 127.415 120.205 127.388 120.2 127.366 cv
120.196 127.342 120.184 127.322 120.166 127.304 cv
116.308 123.445 li
117.56 122.193 li
117.578 122.175 117.589 122.154 117.596 122.13 cv
117.601 122.106 117.599 122.079 117.59 122.05 cv
117.581 122.019 117.562 121.987 117.535 121.95 cv
117.507 121.913 117.472 121.872 117.428 121.829 cv
117.385 121.786 117.344 121.749 117.307 121.721 cv
117.269 121.692 117.234 121.672 117.203 121.662 cv
117.184 121.656 117.165 121.652 117.148 121.652 cv
117.138 121.652 117.129 121.653 117.12 121.655 cv
113.442 125.334 mo
113.419 125.339 113.398 125.351 113.382 125.366 cv
111.381 127.368 li
111.328 127.421 111.296 127.488 111.285 127.571 cv
111.273 127.653 111.312 127.739 111.402 127.828 cv
115.521 131.949 li
115.537 131.964 115.557 131.976 115.581 131.981 cv
115.606 131.986 115.633 131.982 115.664 131.967 cv
115.695 131.952 115.733 131.928 115.778 131.895 cv
115.822 131.862 115.872 131.817 115.927 131.762 cv
115.986 131.703 116.031 131.652 116.063 131.609 cv
116.093 131.567 116.117 131.53 116.131 131.499 cv
116.147 131.469 116.151 131.441 116.146 131.417 cv
116.139 131.393 116.129 131.373 116.112 131.357 cv
114.259 129.503 li
115.8 127.962 li
115.815 127.946 115.826 127.926 115.831 127.9 cv
115.835 127.875 115.833 127.847 115.825 127.817 cv
115.817 127.785 115.8 127.753 115.774 127.717 cv
115.748 127.682 115.713 127.642 115.669 127.598 cv
115.621 127.55 115.579 127.512 115.544 127.486 cv
115.508 127.46 115.475 127.443 115.445 127.437 cv
115.416 127.43 115.39 127.43 115.366 127.437 cv
115.344 127.443 115.324 127.455 115.308 127.471 cv
113.767 129.012 li
112.254 127.498 li
113.884 125.868 li
113.9 125.852 113.911 125.832 113.917 125.808 cv
113.923 125.784 113.922 125.757 113.914 125.726 cv
113.906 125.694 113.888 125.661 113.861 125.624 cv
113.833 125.587 113.797 125.548 113.753 125.504 cv
113.71 125.461 113.669 125.425 113.631 125.396 cv
113.593 125.367 113.559 125.348 113.527 125.339 cv
113.506 125.333 113.488 125.331 113.471 125.331 cv
113.461 125.331 113.451 125.332 113.442 125.334 cv
110.218 128.558 mo
110.194 128.564 110.174 128.574 110.158 128.591 cv
108.156 130.592 li
108.103 130.644 108.072 130.713 108.06 130.795 cv
108.048 130.878 108.088 130.964 108.177 131.053 cv
112.296 135.172 li
112.313 135.189 112.333 135.199 112.357 135.206 cv
112.381 135.211 112.409 135.207 112.439 135.191 cv
112.47 135.177 112.508 135.153 112.553 135.119 cv
112.598 135.086 112.647 135.042 112.702 134.987 cv
112.762 134.928 112.808 134.876 112.838 134.834 cv
112.87 134.792 112.892 134.755 112.907 134.724 cv
112.922 134.693 112.926 134.666 112.921 134.641 cv
112.916 134.617 112.904 134.597 112.889 134.581 cv
111.035 132.728 li
112.575 131.187 li
112.592 131.171 112.601 131.15 112.606 131.125 cv
112.61 131.1 112.609 131.072 112.601 131.04 cv
112.593 131.01 112.576 130.977 112.549 130.941 cv
112.523 130.905 112.488 130.866 112.445 130.823 cv
112.396 130.774 112.355 130.737 112.319 130.711 cv
112.284 130.684 112.25 130.668 112.221 130.661 cv
112.191 130.654 112.165 130.654 112.142 130.661 cv
112.119 130.668 112.099 130.68 112.083 130.696 cv
110.543 132.236 li
109.029 130.723 li
110.66 129.093 li
110.675 129.077 110.687 129.057 110.693 129.033 cv
110.698 129.008 110.697 128.981 110.689 128.95 cv
110.681 128.919 110.663 128.885 110.636 128.849 cv
110.608 128.812 110.573 128.772 110.529 128.728 cv
110.486 128.684 110.445 128.648 110.407 128.62 cv
110.369 128.592 110.334 128.573 110.302 128.563 cv
110.283 128.557 110.265 128.555 110.249 128.555 cv
110.238 128.555 110.228 128.556 110.218 128.558 cv
f
164.89 108.477 mo
164.678 108.478 164.461 108.529 164.238 108.63 cv
164.015 108.731 163.797 108.889 163.581 109.104 cv
163.445 109.239 163.33 109.382 163.236 109.533 cv
163.14 109.683 163.062 109.829 163 109.971 cv
162.938 110.113 162.894 110.238 162.868 110.347 cv
162.842 110.456 162.826 110.537 162.823 110.588 cv
162.819 110.64 162.821 110.678 162.828 110.704 cv
162.835 110.729 162.844 110.753 162.857 110.777 cv
162.87 110.802 162.887 110.827 162.911 110.855 cv
162.933 110.883 162.962 110.913 162.996 110.948 cv
163.045 110.996 163.088 111.035 163.128 111.065 cv
163.167 111.094 163.201 111.115 163.23 111.128 cv
163.258 111.14 163.284 111.144 163.306 111.14 cv
163.329 111.136 163.347 111.126 163.365 111.11 cv
163.392 111.082 163.417 111.019 163.436 110.921 cv
163.454 110.824 163.484 110.71 163.525 110.578 cv
163.565 110.445 163.623 110.303 163.698 110.149 cv
163.775 109.995 163.885 109.846 164.029 109.702 cv
164.152 109.579 164.28 109.49 164.414 109.434 cv
164.547 109.379 164.678 109.353 164.808 109.356 cv
164.937 109.36 165.063 109.39 165.183 109.445 cv
165.305 109.499 165.416 109.577 165.514 109.675 cv
165.613 109.774 165.707 109.89 165.798 110.023 cv
165.889 110.157 165.97 110.326 166.04 110.531 cv
166.11 110.736 166.167 110.984 166.21 111.276 cv
166.254 111.567 166.278 111.921 166.283 112.337 cv
166.309 114.142 li
166.31 114.2 166.316 114.25 166.324 114.295 cv
166.333 114.339 166.344 114.38 166.359 114.418 cv
166.373 114.457 166.396 114.494 166.427 114.532 cv
166.458 114.57 166.497 114.612 166.542 114.658 cv
166.593 114.709 166.639 114.747 166.681 114.773 cv
166.723 114.8 166.763 114.814 166.798 114.815 cv
166.834 114.816 166.867 114.808 166.9 114.792 cv
166.932 114.776 166.964 114.752 166.996 114.72 cv
169.455 112.261 li
169.476 112.241 169.489 112.217 169.496 112.19 cv
169.503 112.162 169.501 112.132 169.489 112.099 cv
169.477 112.067 169.458 112.033 169.432 111.995 cv
169.406 111.957 169.372 111.918 169.331 111.876 cv
169.289 111.835 169.251 111.802 169.214 111.776 cv
169.178 111.751 169.143 111.734 169.109 111.727 cv
169.076 111.719 169.045 111.718 169.018 111.725 cv
168.99 111.731 168.968 111.744 168.949 111.763 cv
167.013 113.699 li
166.982 112.258 li
166.975 111.742 166.948 111.307 166.902 110.953 cv
166.855 110.598 166.79 110.299 166.707 110.054 cv
166.624 109.808 166.525 109.603 166.409 109.436 cv
166.294 109.27 166.164 109.116 166.023 108.974 cv
165.865 108.815 165.689 108.693 165.497 108.606 cv
165.306 108.519 165.106 108.477 164.897 108.477 cv
164.894 108.477 164.892 108.477 164.89 108.477 cv
160.597 112.209 mo
160.568 112.222 160.533 112.244 160.492 112.276 cv
160.45 112.308 160.403 112.352 160.348 112.407 cv
160.306 112.448 160.272 112.483 160.246 112.512 cv
160.22 112.54 160.198 112.568 160.182 112.593 cv
160.166 112.618 160.153 112.639 160.144 112.657 cv
160.135 112.676 160.13 112.693 160.127 112.71 cv
159.759 114.391 li
159.753 114.425 159.749 114.456 159.751 114.482 cv
159.752 114.509 159.758 114.534 159.77 114.559 cv
159.782 114.584 159.799 114.613 159.823 114.644 cv
159.847 114.674 159.879 114.709 159.917 114.749 cv
159.971 114.801 160.017 114.842 160.057 114.871 cv
160.097 114.899 160.133 114.913 160.163 114.912 cv
160.195 114.911 160.221 114.895 160.242 114.864 cv
160.264 114.833 160.286 114.784 160.306 114.718 cv
160.654 113.346 li
164.038 116.729 li
163.109 117.658 li
163.091 117.677 163.079 117.698 163.075 117.724 cv
163.07 117.749 163.072 117.776 163.081 117.805 cv
163.091 117.836 163.106 117.868 163.13 117.905 cv
163.152 117.942 163.185 117.981 163.226 118.022 cv
163.269 118.066 163.31 118.099 163.346 118.122 cv
163.383 118.145 163.417 118.159 163.447 118.165 cv
163.479 118.171 163.505 118.171 163.527 118.165 cv
163.548 118.159 163.567 118.148 163.583 118.132 cv
165.908 115.808 li
165.924 115.792 165.936 115.772 165.942 115.749 cv
165.949 115.727 165.949 115.7 165.942 115.671 cv
165.936 115.64 165.921 115.608 165.898 115.571 cv
165.875 115.534 165.841 115.493 165.798 115.45 cv
165.757 115.409 165.718 115.376 165.683 115.352 cv
165.647 115.328 165.615 115.312 165.585 115.303 cv
165.555 115.294 165.527 115.292 165.5 115.297 cv
165.474 115.303 165.452 115.315 165.434 115.333 cv
164.629 116.138 li
160.719 112.228 li
160.705 112.215 160.689 112.205 160.669 112.198 cv
160.663 112.197 160.657 112.196 160.65 112.196 cv
160.635 112.196 160.617 112.201 160.597 112.209 cv
157.65 115.197 mo
157.622 115.204 157.6 115.216 157.581 115.235 cv
155.611 117.205 li
155.544 117.272 155.512 117.341 155.513 117.413 cv
155.514 117.485 155.553 117.56 155.628 117.635 cv
157.441 119.447 li
157.525 119.533 157.596 119.576 157.654 119.578 cv
157.711 119.58 157.772 119.55 157.836 119.485 cv
157.923 119.399 158.01 119.297 158.097 119.183 cv
158.184 119.068 158.298 118.94 158.438 118.801 cv
158.635 118.604 158.822 118.452 158.999 118.346 cv
159.178 118.238 159.349 118.175 159.514 118.155 cv
159.679 118.134 159.838 118.156 159.992 118.219 cv
160.146 118.284 160.294 118.387 160.436 118.529 cv
160.605 118.699 160.723 118.869 160.788 119.04 cv
160.854 119.21 160.879 119.381 160.863 119.552 cv
160.849 119.723 160.796 119.891 160.704 120.056 cv
160.612 120.221 160.49 120.38 160.336 120.534 cv
160.171 120.699 160.013 120.827 159.864 120.918 cv
159.713 121.008 159.581 121.077 159.466 121.126 cv
159.351 121.173 159.256 121.208 159.179 121.227 cv
159.102 121.246 159.052 121.268 159.029 121.29 cv
159.013 121.307 159.003 121.325 158.999 121.347 cv
158.997 121.37 158.999 121.395 159.01 121.423 cv
159.02 121.451 159.039 121.483 159.067 121.518 cv
159.095 121.552 159.128 121.589 159.167 121.628 cv
159.208 121.669 159.244 121.703 159.277 121.73 cv
159.309 121.758 159.338 121.779 159.363 121.792 cv
159.388 121.806 159.411 121.817 159.432 121.824 cv
159.452 121.83 159.479 121.833 159.512 121.832 cv
159.546 121.831 159.607 121.813 159.696 121.779 cv
159.786 121.745 159.893 121.693 160.018 121.626 cv
160.143 121.558 160.277 121.472 160.421 121.368 cv
160.564 121.263 160.704 121.143 160.842 121.005 cv
161.089 120.758 161.281 120.499 161.418 120.23 cv
161.554 119.96 161.632 119.688 161.651 119.415 cv
161.671 119.141 161.628 118.871 161.522 118.605 cv
161.417 118.339 161.245 118.086 161.007 117.849 cv
160.814 117.656 160.607 117.512 160.386 117.417 cv
160.165 117.321 159.937 117.279 159.703 117.291 cv
159.47 117.302 159.231 117.369 158.987 117.491 cv
158.743 117.615 158.498 117.798 158.253 118.043 cv
158.147 118.149 158.055 118.244 157.976 118.327 cv
157.898 118.409 157.826 118.496 157.76 118.584 cv
156.512 117.336 li
158.103 115.745 li
158.143 115.706 158.15 115.652 158.127 115.584 cv
158.102 115.516 158.049 115.441 157.966 115.358 cv
157.923 115.315 157.883 115.28 157.845 115.254 cv
157.807 115.227 157.772 115.21 157.74 115.2 cv
157.721 115.195 157.704 115.193 157.688 115.193 cv
157.675 115.193 157.662 115.194 157.65 115.197 cv
154.763 118.08 mo
154.739 118.086 154.718 118.098 154.699 118.117 cv
151.605 121.211 li
151.586 121.23 151.575 121.251 151.568 121.275 cv
151.563 121.299 151.566 121.326 151.577 121.356 cv
151.589 121.386 151.608 121.42 151.636 121.459 cv
151.664 121.498 151.699 121.54 151.742 121.583 cv
151.786 121.626 151.827 121.661 151.864 121.688 cv
151.902 121.714 151.935 121.732 151.964 121.743 cv
151.993 121.753 152.019 121.756 152.043 121.749 cv
152.068 121.744 152.088 121.732 152.106 121.713 cv
153.358 120.461 li
157.217 124.321 li
157.236 124.339 157.256 124.35 157.279 124.355 cv
157.302 124.359 157.329 124.354 157.36 124.339 cv
157.39 124.324 157.428 124.3 157.473 124.267 cv
157.518 124.233 157.568 124.189 157.622 124.134 cv
157.68 124.078 157.725 124.027 157.757 123.983 cv
157.789 123.94 157.812 123.902 157.828 123.872 cv
157.842 123.841 157.848 123.814 157.843 123.79 cv
157.839 123.768 157.827 123.747 157.809 123.728 cv
153.95 119.87 li
155.202 118.618 li
155.22 118.6 155.232 118.579 155.238 118.555 cv
155.244 118.531 155.242 118.504 155.233 118.474 cv
155.223 118.445 155.205 118.411 155.178 118.374 cv
155.15 118.337 155.115 118.298 155.071 118.254 cv
155.028 118.211 154.986 118.175 154.949 118.146 cv
154.911 118.117 154.877 118.098 154.846 118.087 cv
154.825 118.081 154.806 118.077 154.789 118.077 cv
154.78 118.077 154.771 118.078 154.763 118.08 cv
151.085 121.758 mo
151.061 121.765 151.041 121.775 151.025 121.792 cv
149.023 123.793 li
148.971 123.845 148.938 123.913 148.927 123.996 cv
148.916 124.079 148.955 124.164 149.044 124.254 cv
153.164 128.373 li
153.18 128.389 153.2 128.4 153.224 128.406 cv
153.248 128.412 153.275 128.407 153.306 128.392 cv
153.338 128.378 153.375 128.354 153.42 128.32 cv
153.465 128.287 153.515 128.243 153.57 128.188 cv
153.629 128.128 153.674 128.077 153.706 128.035 cv
153.736 127.993 153.76 127.956 153.774 127.924 cv
153.789 127.894 153.794 127.866 153.788 127.842 cv
153.782 127.818 153.771 127.798 153.755 127.782 cv
151.902 125.928 li
153.442 124.388 li
153.458 124.372 153.469 124.351 153.473 124.326 cv
153.478 124.301 153.476 124.273 153.468 124.241 cv
153.46 124.211 153.443 124.178 153.417 124.141 cv
153.39 124.106 153.356 124.067 153.312 124.024 cv
153.264 123.975 153.221 123.938 153.186 123.911 cv
153.15 123.885 153.118 123.869 153.088 123.862 cv
153.059 123.854 153.032 123.854 153.009 123.862 cv
152.986 123.869 152.967 123.88 152.951 123.896 cv
151.41 125.437 li
149.897 123.924 li
151.527 122.294 li
151.543 122.278 151.554 122.258 151.559 122.234 cv
151.566 122.209 151.564 122.181 151.557 122.151 cv
151.548 122.12 151.53 122.086 151.503 122.049 cv
151.476 122.013 151.439 121.972 151.396 121.929 cv
151.352 121.885 151.312 121.849 151.274 121.82 cv
151.236 121.792 151.201 121.773 151.17 121.764 cv
151.149 121.758 151.131 121.755 151.114 121.755 cv
151.104 121.755 151.094 121.756 151.085 121.758 cv
147.86 124.983 mo
147.837 124.989 147.816 125 147.801 125.015 cv
145.799 127.017 li
145.746 127.07 145.714 127.138 145.703 127.22 cv
145.691 127.302 145.73 127.389 145.82 127.478 cv
149.939 131.598 li
149.955 131.614 149.975 131.625 149.999 131.63 cv
150.024 131.636 150.051 131.631 150.082 131.617 cv
150.113 131.602 150.151 131.577 150.196 131.545 cv
150.241 131.512 150.29 131.467 150.345 131.412 cv
150.404 131.352 150.45 131.302 150.481 131.259 cv
150.512 131.216 150.535 131.18 150.549 131.149 cv
150.565 131.118 150.569 131.09 150.564 131.066 cv
150.558 131.043 150.547 131.022 150.531 131.007 cv
148.677 129.153 li
150.218 127.612 li
150.234 127.596 150.244 127.576 150.249 127.551 cv
150.253 127.525 150.251 127.497 150.243 127.466 cv
150.235 127.435 150.218 127.402 150.192 127.366 cv
150.166 127.331 150.131 127.292 150.087 127.247 cv
150.039 127.2 149.997 127.162 149.962 127.136 cv
149.927 127.11 149.893 127.093 149.864 127.086 cv
149.834 127.079 149.808 127.079 149.784 127.086 cv
149.762 127.093 149.742 127.104 149.726 127.12 cv
148.186 128.661 li
146.672 127.148 li
148.302 125.518 li
148.318 125.501 148.329 125.482 148.335 125.457 cv
148.341 125.434 148.34 125.406 148.332 125.375 cv
148.324 125.344 148.306 125.311 148.279 125.274 cv
148.251 125.237 148.216 125.197 148.172 125.153 cv
148.128 125.11 148.088 125.074 148.05 125.045 cv
148.012 125.016 147.977 124.997 147.945 124.988 cv
147.925 124.983 147.906 124.98 147.889 124.98 cv
147.879 124.98 147.869 124.981 147.86 124.983 cv
f
199.754 109.568 mo
199.543 109.639 199.335 109.778 199.128 109.984 cv
198.961 110.151 198.837 110.36 198.755 110.608 cv
198.674 110.857 198.638 111.148 198.647 111.483 cv
196.793 109.63 li
196.775 109.611 196.754 109.6 196.731 109.596 cv
196.708 109.591 196.682 109.594 196.653 109.606 cv
196.622 109.617 196.587 109.639 196.545 109.671 cv
196.504 109.703 196.455 109.748 196.398 109.806 cv
196.343 109.86 196.299 109.908 196.267 109.95 cv
196.235 109.991 196.212 110.027 196.2 110.058 cv
196.187 110.089 196.184 110.115 196.19 110.137 cv
196.195 110.159 196.207 110.179 196.226 110.197 cv
200.82 114.792 li
200.838 114.81 200.858 114.821 200.879 114.826 cv
200.899 114.83 200.925 114.827 200.956 114.814 cv
200.987 114.801 201.023 114.779 201.064 114.747 cv
201.106 114.715 201.153 114.671 201.208 114.616 cv
201.266 114.559 201.311 114.51 201.342 114.469 cv
201.375 114.427 201.396 114.392 201.408 114.362 cv
201.42 114.332 201.423 114.306 201.42 114.285 cv
201.417 114.262 201.405 114.243 201.387 114.225 cv
199.225 112.061 li
199.185 111.711 199.187 111.414 199.228 111.171 cv
199.269 110.928 199.361 110.735 199.503 110.593 cv
199.613 110.482 199.731 110.407 199.856 110.365 cv
199.981 110.322 200.109 110.313 200.239 110.338 cv
200.37 110.364 200.503 110.417 200.638 110.497 cv
200.773 110.577 200.929 110.706 201.106 110.882 cv
202.917 112.694 li
202.936 112.713 202.956 112.723 202.978 112.727 cv
202.999 112.73 203.025 112.726 203.055 112.714 cv
203.085 112.704 203.121 112.681 203.162 112.65 cv
203.204 112.617 203.252 112.572 203.31 112.516 cv
203.365 112.46 203.409 112.412 203.44 112.371 cv
203.473 112.329 203.494 112.294 203.506 112.264 cv
203.518 112.235 203.521 112.209 203.518 112.187 cv
203.514 112.165 203.503 112.145 203.485 112.127 cv
201.601 110.242 li
201.378 110.02 201.17 109.849 200.975 109.73 cv
200.78 109.61 200.58 109.536 200.377 109.506 cv
200.317 109.497 200.256 109.493 200.195 109.493 cv
200.05 109.493 199.903 109.518 199.754 109.568 cv
196.816 112.452 mo
196.794 112.457 196.774 112.469 196.756 112.488 cv
195.961 113.281 li
195.225 112.546 li
195.209 112.53 195.19 112.519 195.167 112.515 cv
195.144 112.51 195.117 112.513 195.087 112.524 cv
195.055 112.533 195.019 112.555 194.978 112.587 cv
194.936 112.619 194.888 112.664 194.83 112.721 cv
194.775 112.776 194.731 112.824 194.7 112.866 cv
194.667 112.907 194.646 112.944 194.634 112.975 cv
194.622 113.008 194.619 113.035 194.626 113.056 cv
194.631 113.078 194.642 113.097 194.658 113.113 cv
195.394 113.849 li
194.964 114.279 li
194.946 114.297 194.934 114.318 194.926 114.341 cv
194.919 114.364 194.921 114.389 194.932 114.418 cv
194.942 114.447 194.959 114.479 194.983 114.514 cv
195.007 114.55 195.041 114.59 195.085 114.633 cv
195.167 114.716 195.237 114.765 195.294 114.781 cv
195.351 114.797 195.397 114.788 195.432 114.754 cv
195.865 114.32 li
197.674 116.129 li
197.853 116.308 198.025 116.447 198.19 116.545 cv
198.354 116.644 198.517 116.7 198.677 116.712 cv
198.836 116.725 198.993 116.695 199.151 116.622 cv
199.308 116.55 199.467 116.434 199.627 116.274 cv
199.68 116.221 199.729 116.165 199.775 116.105 cv
199.821 116.045 199.862 115.987 199.899 115.929 cv
199.936 115.873 199.965 115.818 199.985 115.764 cv
200.005 115.711 200.016 115.667 200.016 115.63 cv
200.016 115.594 200.001 115.551 199.971 115.503 cv
199.941 115.455 199.893 115.397 199.827 115.332 cv
199.785 115.29 199.749 115.258 199.716 115.235 cv
199.685 115.212 199.658 115.196 199.636 115.185 cv
199.614 115.175 199.595 115.172 199.579 115.177 cv
199.563 115.181 199.55 115.189 199.538 115.2 cv
199.519 115.219 199.504 115.244 199.491 115.278 cv
199.479 115.311 199.462 115.35 199.442 115.393 cv
199.421 115.437 199.395 115.485 199.364 115.536 cv
199.333 115.587 199.291 115.639 199.238 115.693 cv
199.076 115.855 198.909 115.914 198.737 115.868 cv
198.564 115.822 198.372 115.693 198.159 115.479 cv
196.432 113.753 li
197.227 112.958 li
197.261 112.924 197.271 112.878 197.255 112.821 cv
197.238 112.764 197.189 112.694 197.106 112.611 cv
197.063 112.568 197.024 112.533 196.989 112.508 cv
196.955 112.483 196.923 112.465 196.893 112.456 cv
196.875 112.451 196.859 112.448 196.844 112.448 cv
196.834 112.448 196.825 112.449 196.816 112.452 cv
193.554 115.71 mo
193.348 115.815 193.134 115.979 192.911 116.201 cv
192.792 116.321 192.684 116.449 192.59 116.588 cv
192.495 116.727 192.414 116.862 192.349 116.994 cv
192.284 117.125 192.234 117.249 192.198 117.366 cv
192.162 117.481 192.144 117.569 192.143 117.63 cv
192.142 117.69 192.153 117.742 192.179 117.783 cv
192.204 117.825 192.245 117.874 192.303 117.931 cv
192.337 117.965 192.37 117.995 192.404 118.019 cv
192.437 118.042 192.468 118.059 192.496 118.067 cv
192.525 118.075 192.551 118.077 192.574 118.072 cv
192.597 118.068 192.618 118.056 192.636 118.038 cv
192.664 118.01 192.689 117.951 192.711 117.862 cv
192.735 117.772 192.768 117.666 192.811 117.542 cv
192.855 117.419 192.916 117.285 192.994 117.14 cv
193.071 116.996 193.18 116.853 193.321 116.714 cv
193.451 116.583 193.576 116.488 193.697 116.43 cv
193.818 116.371 193.936 116.344 194.052 116.349 cv
194.169 116.354 194.286 116.389 194.403 116.456 cv
194.52 116.522 194.638 116.615 194.758 116.734 cv
194.998 116.975 li
194.572 117.402 li
194.331 117.642 194.136 117.879 193.986 118.115 cv
193.836 118.35 193.737 118.576 193.688 118.794 cv
193.64 119.012 193.645 119.22 193.702 119.42 cv
193.759 119.619 193.875 119.806 194.05 119.98 cv
194.198 120.129 194.358 120.237 194.526 120.302 cv
194.694 120.367 194.865 120.394 195.038 120.381 cv
195.211 120.369 195.384 120.318 195.559 120.228 cv
195.734 120.138 195.902 120.012 196.065 119.85 cv
196.25 119.664 196.386 119.448 196.472 119.202 cv
196.558 118.955 196.597 118.692 196.587 118.412 cv
196.896 118.722 li
196.924 118.75 196.953 118.762 196.983 118.76 cv
197.013 118.757 197.049 118.742 197.091 118.713 cv
197.133 118.685 197.184 118.641 197.244 118.581 cv
197.306 118.519 197.349 118.469 197.374 118.429 cv
197.4 118.391 197.415 118.355 197.419 118.323 cv
197.424 118.291 197.412 118.261 197.385 118.233 cv
195.298 116.146 li
195.105 115.953 194.915 115.807 194.727 115.706 cv
194.539 115.605 194.348 115.554 194.154 115.553 cv
194.153 115.553 194.151 115.553 194.149 115.553 cv
193.957 115.553 193.759 115.605 193.554 115.71 cv
194.603 119.372 mo
194.509 119.278 194.444 119.177 194.407 119.069 cv
194.37 118.961 194.364 118.844 194.388 118.716 cv
194.412 118.59 194.468 118.456 194.556 118.314 cv
194.645 118.174 194.767 118.025 194.923 117.869 cv
195.408 117.384 li
196.065 118.041 li
196.081 118.337 196.063 118.586 196.011 118.788 cv
195.96 118.992 195.86 119.167 195.71 119.317 cv
195.527 119.5 195.337 119.596 195.14 119.602 cv
195.131 119.602 195.123 119.603 195.115 119.603 cv
194.927 119.603 194.757 119.525 194.603 119.372 cv
190.335 118.986 mo
190.13 119.052 189.928 119.184 189.728 119.384 cv
189.646 119.466 189.575 119.56 189.516 119.662 cv
189.455 119.766 189.407 119.885 189.369 120.019 cv
189.331 120.153 189.305 120.305 189.29 120.476 cv
189.275 120.647 189.273 120.84 189.282 121.056 cv
189.153 121 189.024 120.963 188.895 120.943 cv
188.765 120.924 188.634 120.926 188.502 120.95 cv
188.371 120.975 188.238 121.022 188.107 121.095 cv
187.975 121.167 187.845 121.267 187.716 121.396 cv
187.549 121.563 187.429 121.774 187.356 122.029 cv
187.282 122.283 187.256 122.595 187.276 122.964 cv
186.867 122.555 li
186.849 122.536 186.829 122.524 186.808 122.52 cv
186.789 122.515 186.763 122.517 186.735 122.525 cv
186.706 122.533 186.673 122.552 186.636 122.582 cv
186.6 122.612 186.556 122.652 186.506 122.703 cv
186.454 122.755 186.412 122.8 186.384 122.835 cv
186.356 122.87 186.336 122.903 186.326 122.935 cv
186.315 122.965 186.313 122.991 186.319 123.01 cv
186.324 123.029 186.337 123.048 186.355 123.067 cv
189.45 126.162 li
189.468 126.18 189.488 126.192 189.508 126.196 cv
189.529 126.201 189.555 126.197 189.586 126.185 cv
189.616 126.172 189.652 126.15 189.694 126.117 cv
189.735 126.085 189.784 126.042 189.839 125.987 cv
189.895 125.929 189.94 125.88 189.973 125.839 cv
190.004 125.798 190.027 125.762 190.038 125.732 cv
190.049 125.702 190.054 125.676 190.05 125.655 cv
190.047 125.633 190.036 125.613 190.017 125.594 cv
187.854 123.432 li
187.815 123.081 187.812 122.788 187.844 122.555 cv
187.876 122.321 187.958 122.138 188.088 122.008 cv
188.193 121.902 188.305 121.832 188.423 121.796 cv
188.542 121.761 188.665 121.757 188.793 121.785 cv
188.922 121.812 189.052 121.866 189.185 121.949 cv
189.318 122.032 189.45 122.138 189.58 122.269 cv
191.461 124.151 li
191.48 124.169 191.499 124.18 191.52 124.185 cv
191.541 124.189 191.567 124.185 191.597 124.172 cv
191.629 124.16 191.665 124.137 191.707 124.104 cv
191.75 124.071 191.797 124.027 191.85 123.975 cv
191.905 123.92 191.949 123.872 191.981 123.83 cv
192.013 123.789 192.036 123.753 192.048 123.722 cv
192.061 123.691 192.065 123.665 192.062 123.643 cv
192.058 123.621 192.047 123.601 192.029 123.583 cv
189.866 121.42 li
189.83 121.066 189.826 120.774 189.858 120.541 cv
189.888 120.309 189.969 120.127 190.1 119.996 cv
190.205 119.891 190.317 119.82 190.437 119.783 cv
190.556 119.746 190.68 119.742 190.808 119.769 cv
190.937 119.796 191.066 119.853 191.197 119.938 cv
191.327 120.022 191.458 120.13 191.589 120.261 cv
193.47 122.142 li
193.488 122.16 193.508 122.172 193.53 122.174 cv
193.552 122.178 193.578 122.173 193.609 122.161 cv
193.64 122.148 193.676 122.126 193.718 122.094 cv
193.759 122.062 193.808 122.017 193.865 121.96 cv
193.92 121.904 193.964 121.857 193.996 121.815 cv
194.028 121.774 194.05 121.739 194.061 121.709 cv
194.073 121.678 194.077 121.653 194.073 121.632 cv
194.07 121.609 194.059 121.589 194.041 121.571 cv
192.084 119.615 li
191.91 119.44 191.726 119.292 191.533 119.171 cv
191.341 119.05 191.145 118.972 190.944 118.939 cv
190.876 118.928 190.808 118.922 190.74 118.922 cv
190.606 118.922 190.471 118.944 190.335 118.986 cv
f
234.549 109.044 mo
234.449 109.066 234.346 109.101 234.238 109.149 cv
234.13 109.197 234.02 109.258 233.909 109.333 cv
233.798 109.408 233.693 109.494 233.594 109.593 cv
233.391 109.796 233.234 110.021 233.127 110.263 cv
233.019 110.506 232.97 110.762 232.98 111.032 cv
232.991 111.301 233.069 111.583 233.212 111.876 cv
233.357 112.17 233.582 112.468 233.887 112.774 cv
234.155 113.042 234.422 113.248 234.688 113.393 cv
234.954 113.537 235.215 113.622 235.472 113.648 cv
235.729 113.673 235.98 113.636 236.225 113.537 cv
236.471 113.439 236.705 113.278 236.927 113.055 cv
237.035 112.948 237.128 112.833 237.209 112.711 cv
237.289 112.59 237.355 112.47 237.408 112.351 cv
237.46 112.232 237.5 112.117 237.527 112.005 cv
237.553 111.894 237.566 111.81 237.566 111.752 cv
237.566 111.695 237.563 111.655 237.556 111.631 cv
237.549 111.609 237.539 111.585 237.525 111.56 cv
237.511 111.534 237.491 111.506 237.465 111.476 cv
237.438 111.444 237.406 111.409 237.367 111.37 cv
237.321 111.325 237.28 111.287 237.243 111.257 cv
237.207 111.227 237.173 111.206 237.143 111.191 cv
237.113 111.178 237.088 111.172 237.067 111.174 cv
237.047 111.177 237.029 111.186 237.012 111.202 cv
236.985 111.229 236.966 111.288 236.957 111.378 cv
236.948 111.467 236.932 111.572 236.91 111.694 cv
236.886 111.815 236.847 111.946 236.789 112.086 cv
236.731 112.225 236.638 112.361 236.507 112.492 cv
236.37 112.63 236.223 112.727 236.067 112.784 cv
235.911 112.841 235.746 112.856 235.571 112.828 cv
235.398 112.802 235.216 112.731 235.029 112.619 cv
234.841 112.506 234.646 112.351 234.447 112.151 cv
234.049 111.752 233.816 111.375 233.753 111.019 cv
233.689 110.665 233.793 110.351 234.066 110.077 cv
234.198 109.945 234.332 109.849 234.468 109.788 cv
234.603 109.729 234.728 109.687 234.842 109.665 cv
234.958 109.642 235.056 109.627 235.139 109.62 cv
235.221 109.614 235.28 109.593 235.314 109.558 cv
235.344 109.528 235.351 109.486 235.337 109.429 cv
235.321 109.373 235.269 109.3 235.18 109.211 cv
235.139 109.17 235.102 109.137 235.073 109.112 cv
235.043 109.086 235.014 109.066 234.986 109.051 cv
234.957 109.036 234.929 109.026 234.903 109.02 cv
234.877 109.014 234.836 109.012 234.781 109.012 cv
234.725 109.012 234.648 109.022 234.549 109.044 cv
230.813 112.576 mo
230.602 112.648 230.394 112.786 230.188 112.992 cv
230.011 113.17 229.882 113.389 229.799 113.653 cv
229.716 113.917 229.685 114.232 229.706 114.602 cv
229.297 114.193 li
229.279 114.175 229.259 114.163 229.238 114.159 cv
229.217 114.154 229.193 114.156 229.164 114.163 cv
229.136 114.171 229.103 114.19 229.066 114.22 cv
229.03 114.25 228.986 114.29 228.936 114.341 cv
228.883 114.394 228.842 114.438 228.813 114.473 cv
228.785 114.509 228.766 114.542 228.755 114.573 cv
228.745 114.603 228.742 114.629 228.749 114.648 cv
228.754 114.668 228.766 114.687 228.785 114.705 cv
231.88 117.8 li
231.898 117.818 231.917 117.83 231.938 117.834 cv
231.959 117.839 231.984 117.835 232.016 117.823 cv
232.046 117.81 232.082 117.787 232.124 117.755 cv
232.165 117.724 232.213 117.679 232.268 117.625 cv
232.325 117.568 232.37 117.518 232.403 117.477 cv
232.434 117.436 232.456 117.401 232.467 117.37 cv
232.479 117.34 232.483 117.315 232.48 117.292 cv
232.476 117.271 232.466 117.251 232.447 117.233 cv
230.284 115.07 li
230.245 114.719 230.246 114.422 230.287 114.179 cv
230.329 113.936 230.42 113.744 230.562 113.602 cv
230.673 113.491 230.79 113.415 230.915 113.373 cv
231.04 113.33 231.168 113.322 231.298 113.347 cv
231.429 113.372 231.562 113.425 231.697 113.505 cv
231.833 113.585 231.988 113.714 232.165 113.89 cv
233.977 115.702 li
233.996 115.721 234.015 115.732 234.037 115.735 cv
234.059 115.738 234.085 115.735 234.114 115.723 cv
234.145 115.711 234.18 115.69 234.221 115.658 cv
234.263 115.626 234.312 115.581 234.369 115.524 cv
234.424 115.468 234.468 115.42 234.5 115.379 cv
234.532 115.338 234.554 115.303 234.565 115.273 cv
234.577 115.243 234.581 115.217 234.577 115.195 cv
234.574 115.173 234.563 115.153 234.544 115.135 cv
232.656 113.247 li
232.437 113.027 232.229 112.857 232.034 112.738 cv
231.839 112.619 231.64 112.544 231.436 112.514 cv
231.376 112.506 231.315 112.501 231.255 112.501 cv
231.109 112.501 230.962 112.526 230.813 112.576 cv
227.167 116.247 mo
226.919 116.339 226.673 116.507 226.43 116.75 cv
226.203 116.977 226.038 117.221 225.933 117.484 cv
225.829 117.747 225.786 118.017 225.804 118.294 cv
225.823 118.571 225.904 118.85 226.047 119.131 cv
226.19 119.412 226.394 119.686 226.66 119.952 cv
226.94 120.231 227.218 120.443 227.496 120.588 cv
227.774 120.732 228.047 120.809 228.318 120.819 cv
228.588 120.828 228.855 120.772 229.117 120.651 cv
229.38 120.532 229.639 120.343 229.893 120.09 cv
230.04 119.943 230.167 119.794 230.275 119.642 cv
230.382 119.491 230.472 119.353 230.543 119.227 cv
230.614 119.1 230.666 118.992 230.7 118.901 cv
230.733 118.811 230.749 118.752 230.749 118.727 cv
230.749 118.702 230.746 118.678 230.74 118.657 cv
230.735 118.635 230.725 118.614 230.711 118.593 cv
230.698 118.573 230.681 118.551 230.662 118.526 cv
230.642 118.502 230.618 118.475 230.587 118.445 cv
230.547 118.404 230.51 118.371 230.477 118.346 cv
230.445 118.32 230.418 118.303 230.395 118.294 cv
230.372 118.285 230.35 118.282 230.33 118.288 cv
230.309 118.292 230.29 118.302 230.274 118.318 cv
230.247 118.346 230.217 118.399 230.188 118.478 cv
230.158 118.556 230.116 118.651 230.061 118.766 cv
230.007 118.879 229.934 119.006 229.843 119.146 cv
229.752 119.284 229.632 119.428 229.486 119.576 cv
229.298 119.762 229.115 119.893 228.933 119.97 cv
228.751 120.047 228.57 120.075 228.391 120.057 cv
228.212 120.039 228.037 119.979 227.865 119.875 cv
227.692 119.773 227.52 119.635 227.348 119.463 cv
229.387 117.425 li
229.444 117.367 229.477 117.298 229.484 117.215 cv
229.49 117.132 229.45 117.046 229.36 116.957 cv
229.257 116.853 li
229.055 116.652 228.839 116.488 228.61 116.362 cv
228.381 116.236 228.145 116.161 227.903 116.14 cv
227.857 116.135 227.811 116.133 227.765 116.133 cv
227.568 116.133 227.369 116.171 227.167 116.247 cv
226.635 118.619 mo
226.559 118.463 226.512 118.307 226.497 118.148 cv
226.481 117.99 226.5 117.831 226.553 117.672 cv
226.606 117.513 226.704 117.364 226.844 117.223 cv
227.119 116.949 227.411 116.826 227.72 116.856 cv
228.029 116.887 228.329 117.054 228.621 117.359 cv
226.932 119.047 li
226.811 118.917 226.712 118.774 226.635 118.619 cv
222.809 118.617 mo
222.609 118.625 222.404 118.68 222.196 118.784 cv
221.987 118.887 221.78 119.041 221.573 119.248 cv
221.426 119.395 221.303 119.545 221.204 119.7 cv
221.104 119.855 221.026 120.001 220.968 120.138 cv
220.91 120.276 220.869 120.398 220.844 120.506 cv
220.819 120.614 220.806 120.69 220.806 120.733 cv
220.806 120.777 220.81 120.811 220.817 120.837 cv
220.823 120.862 220.833 120.888 220.846 120.914 cv
220.858 120.94 220.877 120.968 220.901 120.997 cv
220.925 121.025 220.955 121.057 220.989 121.091 cv
221.039 121.142 221.081 121.18 221.116 121.208 cv
221.15 121.235 221.18 121.254 221.206 121.263 cv
221.231 121.272 221.252 121.273 221.27 121.267 cv
221.289 121.26 221.306 121.248 221.322 121.232 cv
221.345 121.209 221.365 121.149 221.382 121.052 cv
221.399 120.955 221.429 120.839 221.47 120.706 cv
221.512 120.573 221.567 120.431 221.639 120.28 cv
221.71 120.128 221.811 119.986 221.945 119.853 cv
222.066 119.732 222.191 119.642 222.32 119.585 cv
222.448 119.527 222.573 119.5 222.694 119.502 cv
222.816 119.505 222.934 119.533 223.047 119.587 cv
223.16 119.641 223.263 119.713 223.355 119.805 cv
223.481 119.931 223.573 120.067 223.629 120.214 cv
223.687 120.361 223.71 120.513 223.7 120.67 cv
223.69 120.827 223.644 120.985 223.563 121.144 cv
223.481 121.304 223.365 121.459 223.214 121.611 cv
222.825 121.999 li
222.804 122.019 222.79 122.042 222.781 122.066 cv
222.774 122.09 222.772 122.117 222.777 122.147 cv
222.781 122.177 222.794 122.209 222.817 122.245 cv
222.838 122.28 222.871 122.32 222.915 122.364 cv
222.962 122.412 223.006 122.447 223.043 122.468 cv
223.082 122.489 223.116 122.503 223.148 122.508 cv
223.179 122.513 223.208 122.512 223.233 122.502 cv
223.259 122.492 223.282 122.477 223.301 122.458 cv
223.737 122.022 li
223.92 121.839 224.102 121.696 224.285 121.592 cv
224.466 121.487 224.644 121.423 224.815 121.398 cv
224.986 121.373 225.149 121.386 225.301 121.436 cv
225.452 121.486 225.591 121.574 225.717 121.7 cv
225.832 121.814 225.918 121.94 225.975 122.078 cv
226.032 122.216 226.057 122.359 226.048 122.511 cv
226.04 122.662 225.995 122.816 225.917 122.972 cv
225.838 123.128 225.721 123.285 225.566 123.44 cv
225.406 123.6 225.242 123.727 225.076 123.82 cv
224.908 123.914 224.754 123.988 224.615 124.044 cv
224.474 124.099 224.355 124.14 224.256 124.165 cv
224.157 124.191 224.096 124.214 224.076 124.235 cv
224.045 124.266 224.038 124.305 224.053 124.354 cv
224.069 124.402 224.118 124.468 224.201 124.551 cv
224.249 124.599 224.291 124.637 224.328 124.668 cv
224.365 124.698 224.398 124.72 224.428 124.736 cv
224.457 124.753 224.484 124.764 224.51 124.771 cv
224.536 124.778 224.564 124.781 224.598 124.78 cv
224.631 124.778 224.699 124.763 224.8 124.731 cv
224.903 124.7 225.021 124.651 225.155 124.583 cv
225.289 124.516 225.433 124.429 225.586 124.323 cv
225.74 124.218 225.891 124.091 226.04 123.942 cv
226.285 123.697 226.474 123.445 226.606 123.187 cv
226.738 122.929 226.812 122.675 226.828 122.425 cv
226.844 122.176 226.805 121.933 226.713 121.698 cv
226.62 121.463 226.472 121.243 226.267 121.039 cv
226.128 120.9 225.97 120.794 225.796 120.723 cv
225.622 120.652 225.443 120.616 225.259 120.616 cv
225.076 120.616 224.89 120.649 224.702 120.716 cv
224.515 120.783 224.336 120.885 224.166 121.022 cv
224.159 121.016 li
224.269 120.855 224.343 120.691 224.381 120.522 cv
224.419 120.353 224.427 120.187 224.405 120.023 cv
224.384 119.859 224.33 119.699 224.247 119.542 cv
224.163 119.385 224.051 119.237 223.912 119.097 cv
223.749 118.934 223.574 118.811 223.389 118.729 cv
223.22 118.654 223.045 118.616 222.863 118.616 cv
222.845 118.616 222.827 118.617 222.809 118.617 cv
220.157 123.284 mo
219.912 123.355 219.677 123.503 219.452 123.727 cv
219.349 123.831 219.263 123.941 219.195 124.058 cv
219.126 124.175 219.071 124.301 219.029 124.436 cv
218.988 124.572 218.959 124.718 218.944 124.876 cv
218.928 125.034 218.921 125.209 218.923 125.399 cv
218.507 124.983 li
218.486 124.962 218.465 124.95 218.445 124.945 cv
218.425 124.941 218.399 124.944 218.369 124.955 cv
218.339 124.967 218.308 124.987 218.272 125.014 cv
218.238 125.041 218.197 125.079 218.149 125.127 cv
218.103 125.173 218.066 125.213 218.038 125.249 cv
218.009 125.285 217.989 125.318 217.977 125.347 cv
217.966 125.377 217.963 125.401 217.968 125.421 cv
217.975 125.441 217.987 125.461 218.008 125.482 cv
222.331 129.804 li
222.35 129.822 222.369 129.835 222.391 129.84 cv
222.412 129.846 222.44 129.843 222.47 129.829 cv
222.501 129.818 222.537 129.795 222.578 129.763 cv
222.619 129.73 222.668 129.687 222.723 129.632 cv
222.78 129.575 222.825 129.525 222.857 129.485 cv
222.889 129.443 222.911 129.407 222.922 129.378 cv
222.934 129.348 222.937 129.322 222.933 129.299 cv
222.928 129.276 222.917 129.255 222.899 129.236 cv
221.35 127.689 li
221.513 127.687 221.661 127.678 221.794 127.665 cv
221.927 127.651 222.051 127.627 222.164 127.591 cv
222.278 127.556 222.383 127.508 222.479 127.448 cv
222.575 127.389 222.669 127.313 222.761 127.221 cv
222.976 127.006 223.127 126.774 223.213 126.526 cv
223.299 126.276 223.323 126.02 223.286 125.757 cv
223.25 125.493 223.153 125.224 222.997 124.951 cv
222.839 124.676 222.626 124.404 222.355 124.133 cv
222.13 123.908 221.895 123.719 221.648 123.565 cv
221.402 123.41 221.153 123.306 220.902 123.255 cv
220.796 123.233 220.691 123.222 220.585 123.222 cv
220.442 123.222 220.299 123.243 220.157 123.284 cv
220.746 127.084 mo
219.514 125.853 li
219.492 125.651 219.483 125.471 219.487 125.313 cv
219.49 125.156 219.506 125.016 219.533 124.896 cv
219.559 124.775 219.598 124.668 219.648 124.574 cv
219.697 124.481 219.759 124.398 219.833 124.324 cv
219.981 124.177 220.138 124.087 220.307 124.057 cv
220.474 124.026 220.645 124.039 220.819 124.095 cv
220.992 124.151 221.165 124.24 221.337 124.364 cv
221.509 124.488 221.674 124.628 221.832 124.787 cv
221.977 124.932 222.105 125.089 222.217 125.262 cv
222.329 125.434 222.411 125.609 222.462 125.787 cv
222.513 125.965 222.522 126.139 222.488 126.311 cv
222.454 126.482 222.366 126.64 222.223 126.783 cv
222.068 126.938 221.87 127.035 221.629 127.075 cv
221.498 127.096 221.351 127.107 221.189 127.107 cv
221.052 127.107 220.904 127.099 220.746 127.084 cv
216.388 127.002 mo
216.184 127.066 215.981 127.2 215.781 127.399 cv
215.699 127.481 215.627 127.574 215.568 127.678 cv
215.509 127.78 215.46 127.899 215.422 128.033 cv
215.384 128.167 215.357 128.32 215.343 128.49 cv
215.328 128.661 215.325 128.855 215.334 129.07 cv
215.206 129.015 215.077 128.978 214.948 128.958 cv
214.818 128.938 214.687 128.941 214.556 128.966 cv
214.423 128.989 214.292 129.037 214.16 129.109 cv
214.028 129.182 213.898 129.282 213.77 129.41 cv
213.602 129.578 213.482 129.789 213.409 130.044 cv
213.335 130.297 213.309 130.61 213.33 130.979 cv
212.92 130.569 li
212.902 130.551 212.882 130.54 212.862 130.535 cv
212.841 130.531 212.817 130.532 212.788 130.54 cv
212.759 130.549 212.727 130.567 212.69 130.597 cv
212.653 130.627 212.61 130.666 212.559 130.717 cv
212.506 130.77 212.466 130.814 212.437 130.849 cv
212.408 130.885 212.389 130.919 212.378 130.949 cv
212.369 130.981 212.366 131.006 212.372 131.025 cv
212.378 131.044 212.389 131.063 212.408 131.081 cv
215.503 134.177 li
215.521 134.195 215.541 134.206 215.562 134.212 cv
215.582 134.216 215.608 134.212 215.639 134.199 cv
215.67 134.186 215.706 134.164 215.747 134.132 cv
215.789 134.1 215.836 134.057 215.891 134.001 cv
215.949 133.944 215.994 133.895 216.025 133.853 cv
216.058 133.812 216.079 133.777 216.091 133.747 cv
216.103 133.717 216.106 133.691 216.103 133.67 cv
216.1 133.647 216.088 133.627 216.07 133.609 cv
213.908 131.446 li
213.868 131.096 213.865 130.803 213.897 130.569 cv
213.929 130.335 214.01 130.153 214.141 130.023 cv
214.247 129.917 214.358 129.847 214.476 129.811 cv
214.594 129.776 214.718 129.772 214.846 129.799 cv
214.974 129.827 215.105 129.882 215.238 129.964 cv
215.371 130.046 215.503 130.153 215.634 130.284 cv
217.515 132.165 li
217.533 132.183 217.552 132.195 217.573 132.199 cv
217.594 132.204 217.619 132.2 217.651 132.187 cv
217.681 132.175 217.718 132.151 217.76 132.118 cv
217.803 132.086 217.85 132.043 217.904 131.989 cv
217.958 131.935 218.002 131.887 218.034 131.846 cv
218.065 131.804 218.088 131.768 218.101 131.737 cv
218.113 131.706 218.118 131.68 218.115 131.657 cv
218.111 131.636 218.101 131.616 218.082 131.598 cv
215.919 129.434 li
215.882 129.082 215.879 128.789 215.91 128.556 cv
215.942 128.323 216.022 128.142 216.153 128.011 cv
216.258 127.905 216.371 127.834 216.49 127.797 cv
216.609 127.761 216.733 127.757 216.861 127.784 cv
216.99 127.812 217.119 127.867 217.25 127.952 cv
217.381 128.038 217.511 128.145 217.642 128.276 cv
219.523 130.157 li
219.542 130.175 219.561 130.186 219.583 130.19 cv
219.604 130.193 219.632 130.189 219.662 130.176 cv
219.693 130.163 219.73 130.141 219.77 130.109 cv
219.811 130.076 219.861 130.032 219.919 129.974 cv
219.973 129.919 220.017 129.871 220.049 129.83 cv
220.082 129.789 220.103 129.753 220.114 129.723 cv
220.126 129.694 220.13 129.667 220.126 129.646 cv
220.123 129.624 220.112 129.604 220.094 129.586 cv
218.137 127.629 li
217.963 127.455 217.779 127.307 217.587 127.185 cv
217.394 127.064 217.198 126.986 216.997 126.953 cv
216.93 126.942 216.862 126.936 216.794 126.936 cv
216.659 126.936 216.524 126.958 216.388 127.002 cv
f
266.942 108.171 mo
266.909 108.175 266.869 108.189 266.825 108.215 cv
266.781 108.241 266.728 108.28 266.665 108.331 cv
266.602 108.382 266.532 108.447 266.454 108.524 cv
266.384 108.594 266.325 108.657 266.277 108.712 cv
266.229 108.767 266.192 108.816 266.166 108.86 cv
266.14 108.904 266.123 108.945 266.115 108.981 cv
266.106 109.017 266.105 109.049 266.112 109.08 cv
267.229 113.368 li
267.243 113.414 267.257 113.456 267.272 113.494 cv
267.288 113.531 267.306 113.568 267.327 113.603 cv
267.35 113.639 267.377 113.675 267.408 113.711 cv
267.441 113.748 267.478 113.789 267.522 113.832 cv
267.577 113.887 267.624 113.929 267.665 113.958 cv
267.704 113.987 267.741 114.002 267.774 114.006 cv
267.808 114.009 267.837 114.006 267.862 113.995 cv
267.887 113.983 267.913 113.964 267.94 113.936 cv
269.761 112.116 li
270.696 113.052 li
270.715 113.07 270.734 113.081 270.755 113.086 cv
270.776 113.089 270.802 113.085 270.834 113.072 cv
270.865 113.059 270.902 113.036 270.944 113.002 cv
270.987 112.969 271.036 112.925 271.093 112.868 cv
271.152 112.809 271.198 112.758 271.231 112.716 cv
271.265 112.673 271.288 112.636 271.302 112.603 cv
271.318 112.57 271.323 112.542 271.32 112.521 cv
271.317 112.498 271.306 112.478 271.287 112.46 cv
270.352 111.524 li
270.854 111.022 li
270.896 110.982 270.906 110.928 270.885 110.861 cv
270.864 110.794 270.816 110.723 270.741 110.648 cv
270.658 110.565 270.585 110.515 270.52 110.5 cv
270.456 110.484 270.405 110.496 270.366 110.534 cv
269.864 111.037 li
267.023 108.196 li
267.007 108.179 266.984 108.17 266.958 108.17 cv
266.953 108.17 266.948 108.17 266.942 108.171 cv
266.824 109.193 mo
266.83 109.186 li
269.272 111.628 li
267.835 113.065 li
cp
265.056 112.324 mo
264.12 113.259 li
264.031 113.312 263.94 113.374 263.848 113.445 cv
263.757 113.516 263.663 113.598 263.57 113.692 cv
263.395 113.866 263.26 114.053 263.164 114.252 cv
263.067 114.452 263.015 114.653 263.005 114.854 cv
262.996 115.056 263.032 115.257 263.113 115.456 cv
263.193 115.655 263.321 115.843 263.498 116.02 cv
263.649 116.172 263.798 116.28 263.946 116.346 cv
264.094 116.411 264.246 116.45 264.402 116.464 cv
264.404 116.635 264.432 116.806 264.484 116.973 cv
264.537 117.14 264.633 117.293 264.773 117.434 cv
264.874 117.535 264.995 117.601 265.136 117.635 cv
265.277 117.668 265.433 117.657 265.602 117.602 cv
265.586 117.733 265.579 117.856 265.581 117.97 cv
265.584 118.084 265.598 118.193 265.624 118.295 cv
265.65 118.397 265.69 118.493 265.743 118.582 cv
265.795 118.671 265.86 118.754 265.936 118.83 cv
266.055 118.949 266.19 119.035 266.343 119.086 cv
266.496 119.137 266.665 119.144 266.85 119.105 cv
267.036 119.066 267.238 118.98 267.456 118.847 cv
267.674 118.714 267.907 118.523 268.157 118.273 cv
268.416 118.013 268.612 117.76 268.746 117.515 cv
268.881 117.268 268.961 117.035 268.986 116.815 cv
269.011 116.595 268.989 116.391 268.92 116.203 cv
268.852 116.014 268.746 115.85 268.604 115.708 cv
268.469 115.572 268.324 115.48 268.17 115.43 cv
268.015 115.381 267.855 115.368 267.691 115.393 cv
267.527 115.417 267.362 115.474 267.196 115.564 cv
267.03 115.655 266.867 115.775 266.71 115.924 cv
265.866 116.698 li
265.739 116.817 265.611 116.887 265.483 116.909 cv
265.356 116.931 265.253 116.902 265.173 116.822 cv
265.103 116.752 265.056 116.679 265.029 116.599 cv
265.003 116.52 264.99 116.44 264.99 116.357 cv
265.102 116.346 265.232 116.3 265.379 116.22 cv
265.525 116.14 265.661 116.036 265.788 115.91 cv
265.966 115.731 266.104 115.544 266.2 115.347 cv
266.297 115.149 266.351 114.95 266.362 114.748 cv
266.373 114.547 266.339 114.348 266.259 114.153 cv
266.179 113.958 266.049 113.772 265.87 113.593 cv
265.763 113.485 265.642 113.397 265.511 113.33 cv
265.379 113.261 265.232 113.227 265.069 113.224 cv
265.513 112.781 li
265.547 112.747 265.558 112.701 265.543 112.643 cv
265.53 112.586 265.483 112.517 265.403 112.437 cv
265.325 112.359 265.257 112.311 265.2 112.293 cv
265.181 112.287 265.164 112.284 265.147 112.284 cv
265.112 112.284 265.082 112.297 265.056 112.324 cv
264.689 115.785 mo
264.456 115.783 264.238 115.681 264.034 115.477 cv
263.942 115.385 263.868 115.285 263.81 115.175 cv
263.753 115.064 263.719 114.95 263.709 114.832 cv
263.698 114.714 263.715 114.596 263.76 114.478 cv
263.805 114.36 263.883 114.246 263.993 114.136 cv
264.206 113.923 264.429 113.817 264.663 113.819 cv
264.897 113.822 265.119 113.928 265.33 114.139 cv
265.42 114.229 265.493 114.328 265.549 114.437 cv
265.605 114.546 265.638 114.658 265.647 114.775 cv
265.656 114.892 265.637 115.01 265.59 115.128 cv
265.543 115.246 265.463 115.361 265.351 115.474 cv
265.143 115.681 264.923 115.785 264.692 115.785 cv
264.691 115.785 264.69 115.785 264.689 115.785 cv
266.438 118.218 mo
266.389 118.17 266.348 118.118 266.312 118.061 cv
266.277 118.005 266.249 117.94 266.23 117.865 cv
266.21 117.791 266.198 117.704 266.193 117.606 cv
266.189 117.507 266.195 117.392 266.21 117.262 cv
267.039 116.488 li
267.23 116.307 267.415 116.198 267.596 116.161 cv
267.778 116.124 267.935 116.173 268.068 116.306 cv
268.145 116.383 268.205 116.473 268.245 116.576 cv
268.285 116.678 268.297 116.792 268.281 116.918 cv
268.265 117.044 268.215 117.182 268.133 117.33 cv
268.051 117.48 267.923 117.64 267.751 117.812 cv
267.481 118.083 267.232 118.255 267.003 118.329 cv
266.927 118.354 266.855 118.367 266.788 118.367 cv
266.654 118.367 266.537 118.317 266.438 118.218 cv
261.059 116.423 mo
260.81 116.516 260.565 116.684 260.321 116.927 cv
260.094 117.154 259.928 117.399 259.824 117.661 cv
259.719 117.923 259.677 118.193 259.695 118.471 cv
259.713 118.749 259.794 119.028 259.937 119.308 cv
260.081 119.589 260.286 119.863 260.552 120.128 cv
260.831 120.408 261.11 120.621 261.387 120.765 cv
261.664 120.91 261.939 120.986 262.209 120.995 cv
262.48 121.004 262.746 120.948 263.009 120.829 cv
263.271 120.708 263.529 120.521 263.784 120.266 cv
263.931 120.119 264.058 119.97 264.165 119.819 cv
264.273 119.668 264.363 119.529 264.434 119.403 cv
264.505 119.277 264.557 119.169 264.59 119.078 cv
264.624 118.987 264.641 118.93 264.641 118.904 cv
264.641 118.879 264.637 118.856 264.632 118.834 cv
264.626 118.812 264.616 118.791 264.603 118.77 cv
264.588 118.75 264.572 118.727 264.552 118.703 cv
264.534 118.679 264.508 118.652 264.479 118.623 cv
264.437 118.581 264.4 118.548 264.369 118.523 cv
264.337 118.498 264.309 118.48 264.286 118.471 cv
264.263 118.462 264.241 118.46 264.22 118.464 cv
264.2 118.469 264.182 118.48 264.165 118.496 cv
264.138 118.523 264.109 118.576 264.079 118.654 cv
264.048 118.732 264.006 118.829 263.952 118.942 cv
263.898 119.056 263.825 119.183 263.734 119.322 cv
263.643 119.461 263.524 119.605 263.376 119.752 cv
263.19 119.938 263.005 120.07 262.824 120.146 cv
262.642 120.223 262.462 120.252 262.283 120.234 cv
262.104 120.217 261.927 120.155 261.755 120.053 cv
261.583 119.949 261.411 119.812 261.24 119.641 cv
263.277 117.602 li
263.335 117.544 263.367 117.474 263.374 117.391 cv
263.382 117.309 263.34 117.223 263.251 117.133 cv
263.148 117.03 li
262.946 116.828 262.731 116.664 262.501 116.538 cv
262.272 116.412 262.037 116.338 261.795 116.317 cv
261.748 116.313 261.701 116.31 261.654 116.31 cv
261.458 116.31 261.259 116.348 261.059 116.423 cv
260.526 118.795 mo
260.449 118.641 260.403 118.484 260.388 118.325 cv
260.372 118.166 260.391 118.008 260.445 117.849 cv
260.498 117.69 260.595 117.54 260.736 117.4 cv
261.01 117.125 261.302 117.003 261.611 117.033 cv
261.92 117.063 262.221 117.23 262.511 117.536 cv
260.823 119.224 li
260.701 119.093 260.602 118.95 260.526 118.795 cv
257.613 119.897 mo
257.367 119.968 257.132 120.116 256.907 120.341 cv
256.804 120.444 256.718 120.554 256.65 120.671 cv
256.58 120.788 256.525 120.914 256.484 121.049 cv
256.443 121.184 256.415 121.331 256.398 121.489 cv
256.382 121.648 256.376 121.821 256.378 122.012 cv
255.962 121.596 li
255.941 121.576 255.921 121.563 255.9 121.558 cv
255.879 121.553 255.854 121.557 255.824 121.568 cv
255.795 121.58 255.762 121.599 255.728 121.627 cv
255.694 121.654 255.652 121.693 255.604 121.74 cv
255.558 121.786 255.521 121.827 255.492 121.863 cv
255.463 121.898 255.444 121.93 255.432 121.961 cv
255.421 121.99 255.417 122.015 255.424 122.035 cv
255.429 122.053 255.443 122.074 255.463 122.095 cv
259.786 126.418 li
259.804 126.436 259.824 126.447 259.845 126.454 cv
259.868 126.459 259.894 126.455 259.925 126.443 cv
259.956 126.43 259.992 126.408 260.034 126.376 cv
260.075 126.344 260.123 126.301 260.178 126.245 cv
260.235 126.188 260.28 126.139 260.312 126.097 cv
260.344 126.056 260.366 126.021 260.377 125.991 cv
260.389 125.961 260.392 125.934 260.387 125.912 cv
260.383 125.888 260.371 125.868 260.353 125.85 cv
258.806 124.303 li
258.969 124.3 259.116 124.292 259.25 124.278 cv
259.382 124.265 259.505 124.24 259.619 124.204 cv
259.732 124.168 259.837 124.121 259.934 124.061 cv
260.03 124.002 260.124 123.926 260.215 123.835 cv
260.431 123.619 260.582 123.387 260.668 123.138 cv
260.754 122.89 260.779 122.633 260.742 122.369 cv
260.705 122.106 260.608 121.837 260.451 121.563 cv
260.294 121.289 260.08 121.017 259.809 120.747 cv
259.585 120.522 259.35 120.332 259.103 120.177 cv
258.856 120.022 258.608 119.92 258.357 119.867 cv
258.252 119.846 258.147 119.835 258.043 119.835 cv
257.898 119.835 257.755 119.856 257.613 119.897 cv
258.2 123.697 mo
256.969 122.466 li
256.947 122.263 256.938 122.084 256.942 121.927 cv
256.946 121.769 256.961 121.63 256.988 121.509 cv
257.015 121.387 257.053 121.28 257.102 121.188 cv
257.153 121.094 257.214 121.01 257.288 120.937 cv
257.435 120.789 257.594 120.7 257.761 120.67 cv
257.929 120.64 258.1 120.652 258.273 120.708 cv
258.447 120.764 258.62 120.854 258.792 120.977 cv
258.963 121.1 259.129 121.242 259.287 121.4 cv
259.432 121.544 259.56 121.702 259.672 121.874 cv
259.784 122.047 259.866 122.222 259.917 122.4 cv
259.968 122.578 259.977 122.753 259.943 122.924 cv
259.909 123.096 259.82 123.253 259.678 123.396 cv
259.523 123.55 259.325 123.647 259.083 123.687 cv
258.952 123.709 258.806 123.72 258.644 123.72 cv
258.507 123.72 258.359 123.712 258.2 123.697 cv
253.843 123.615 mo
253.638 123.68 253.436 123.812 253.236 124.012 cv
253.154 124.095 253.083 124.187 253.023 124.29 cv
252.963 124.393 252.915 124.512 252.877 124.646 cv
252.839 124.78 252.813 124.933 252.798 125.104 cv
252.783 125.275 252.781 125.467 252.789 125.683 cv
252.661 125.628 252.532 125.59 252.402 125.572 cv
252.273 125.552 252.142 125.554 252.01 125.578 cv
251.879 125.602 251.746 125.651 251.615 125.723 cv
251.483 125.795 251.353 125.895 251.224 126.023 cv
251.057 126.191 250.937 126.401 250.863 126.656 cv
250.791 126.911 250.764 127.222 250.784 127.592 cv
250.375 127.183 li
250.357 127.164 250.337 127.153 250.317 127.148 cv
250.296 127.143 250.271 127.145 250.242 127.153 cv
250.215 127.161 250.181 127.18 250.144 127.21 cv
250.108 127.239 250.064 127.28 250.014 127.33 cv
249.962 127.383 249.92 127.427 249.892 127.462 cv
249.864 127.498 249.844 127.532 249.834 127.562 cv
249.823 127.593 249.821 127.618 249.827 127.638 cv
249.832 127.658 249.845 127.677 249.863 127.695 cv
252.958 130.79 li
252.976 130.808 252.996 130.819 253.016 130.824 cv
253.037 130.828 253.063 130.825 253.094 130.812 cv
253.124 130.8 253.16 130.777 253.202 130.745 cv
253.243 130.713 253.292 130.669 253.347 130.614 cv
253.403 130.557 253.448 130.508 253.481 130.467 cv
253.512 130.425 253.535 130.389 253.546 130.36 cv
253.557 130.33 253.562 130.305 253.558 130.282 cv
253.555 130.261 253.544 130.241 253.525 130.223 cv
251.362 128.059 li
251.323 127.708 251.32 127.417 251.352 127.183 cv
251.384 126.949 251.466 126.766 251.596 126.635 cv
251.701 126.53 251.813 126.46 251.931 126.424 cv
252.05 126.389 252.173 126.384 252.301 126.412 cv
252.43 126.439 252.56 126.495 252.693 126.577 cv
252.826 126.66 252.958 126.766 253.088 126.897 cv
254.969 128.778 li
254.988 128.796 255.007 128.808 255.028 128.812 cv
255.048 128.817 255.075 128.813 255.105 128.801 cv
255.137 128.788 255.173 128.765 255.215 128.731 cv
255.258 128.698 255.305 128.655 255.358 128.603 cv
255.413 128.548 255.457 128.499 255.489 128.458 cv
255.521 128.417 255.544 128.38 255.556 128.35 cv
255.569 128.319 255.573 128.292 255.57 128.271 cv
255.566 128.249 255.555 128.229 255.537 128.21 cv
253.374 126.048 li
253.338 125.695 253.334 125.401 253.365 125.169 cv
253.396 124.936 253.477 124.754 253.608 124.624 cv
253.713 124.519 253.825 124.447 253.945 124.411 cv
254.064 124.374 254.188 124.369 254.316 124.397 cv
254.445 124.424 254.574 124.481 254.705 124.565 cv
254.835 124.65 254.966 124.758 255.097 124.888 cv
256.978 126.769 li
256.996 126.788 257.016 126.799 257.038 126.803 cv
257.06 126.805 257.086 126.801 257.117 126.788 cv
257.148 126.776 257.184 126.753 257.226 126.722 cv
257.267 126.689 257.316 126.644 257.373 126.588 cv
257.428 126.533 257.472 126.484 257.504 126.443 cv
257.536 126.401 257.558 126.366 257.569 126.337 cv
257.581 126.307 257.585 126.281 257.581 126.259 cv
257.577 126.238 257.567 126.217 257.549 126.199 cv
255.592 124.242 li
255.417 124.068 255.234 123.92 255.041 123.799 cv
254.85 123.677 254.652 123.6 254.452 123.566 cv
254.384 123.555 254.317 123.55 254.249 123.55 cv
254.115 123.55 253.98 123.571 253.843 123.615 cv
f
302.707 108.763 mo
302.685 108.769 302.666 108.781 302.647 108.799 cv
301.853 109.594 li
301.117 108.857 li
301.101 108.841 301.082 108.831 301.058 108.827 cv
301.036 108.822 301.009 108.825 300.977 108.835 cv
300.947 108.846 300.911 108.867 300.869 108.899 cv
300.828 108.931 300.778 108.975 300.722 109.033 cv
300.666 109.088 300.623 109.137 300.59 109.178 cv
300.559 109.218 300.537 109.255 300.525 109.288 cv
300.514 109.32 300.511 109.346 300.516 109.369 cv
300.523 109.39 300.534 109.409 300.55 109.425 cv
301.285 110.161 li
300.856 110.591 li
300.837 110.609 300.824 110.63 300.818 110.653 cv
300.811 110.676 300.812 110.702 300.822 110.73 cv
300.833 110.759 300.85 110.791 300.875 110.827 cv
300.898 110.862 300.932 110.901 300.975 110.945 cv
301.058 111.027 301.128 111.077 301.185 111.093 cv
301.243 111.109 301.289 111.1 301.323 111.065 cv
301.757 110.632 li
303.566 112.441 li
303.744 112.62 303.916 112.759 304.081 112.857 cv
304.246 112.956 304.408 113.011 304.567 113.024 cv
304.727 113.036 304.885 113.007 305.043 112.935 cv
305.199 112.862 305.358 112.745 305.519 112.585 cv
305.571 112.533 305.62 112.476 305.666 112.417 cv
305.712 112.358 305.754 112.299 305.79 112.242 cv
305.826 112.184 305.855 112.129 305.876 112.077 cv
305.897 112.024 305.907 111.979 305.907 111.943 cv
305.907 111.906 305.892 111.864 305.862 111.815 cv
305.833 111.767 305.784 111.71 305.718 111.643 cv
305.677 111.602 305.64 111.57 305.608 111.547 cv
305.576 111.524 305.549 111.507 305.527 111.497 cv
305.505 111.486 305.486 111.484 305.47 111.488 cv
305.455 111.493 305.44 111.501 305.429 111.513 cv
305.411 111.531 305.395 111.557 305.383 111.59 cv
305.37 111.623 305.353 111.662 305.333 111.705 cv
305.312 111.748 305.286 111.796 305.256 111.848 cv
305.224 111.9 305.183 111.952 305.13 112.004 cv
304.967 112.167 304.799 112.225 304.628 112.179 cv
304.456 112.133 304.263 112.004 304.05 111.792 cv
302.324 110.064 li
303.118 109.271 li
303.153 109.236 303.161 109.19 303.145 109.133 cv
303.13 109.075 303.081 109.006 302.998 108.923 cv
302.955 108.879 302.915 108.845 302.881 108.82 cv
302.847 108.794 302.814 108.777 302.784 108.768 cv
302.766 108.763 302.749 108.76 302.733 108.76 cv
302.724 108.76 302.715 108.761 302.707 108.763 cv
300.475 111.019 mo
300.45 111.022 300.415 111.034 300.371 111.055 cv
300.326 111.077 300.278 111.104 300.228 111.136 cv
300.177 111.169 300.131 111.202 300.09 111.236 cv
300.048 111.27 300.013 111.303 299.984 111.333 cv
299.917 111.399 299.859 111.473 299.812 111.556 cv
299.763 111.638 299.728 111.735 299.706 111.846 cv
299.685 111.957 299.676 112.089 299.679 112.242 cv
299.682 112.395 299.704 112.575 299.742 112.783 cv
299.292 112.333 li
299.274 112.314 299.255 112.303 299.234 112.298 cv
299.213 112.294 299.188 112.296 299.16 112.304 cv
299.131 112.312 299.099 112.331 299.062 112.36 cv
299.025 112.39 298.982 112.43 298.932 112.481 cv
298.878 112.533 298.838 112.578 298.809 112.613 cv
298.78 112.649 298.761 112.682 298.751 112.713 cv
298.74 112.744 298.738 112.769 298.743 112.789 cv
298.75 112.809 298.761 112.827 298.779 112.845 cv
301.875 115.94 li
301.893 115.958 301.912 115.97 301.933 115.975 cv
301.954 115.979 301.98 115.976 302.01 115.963 cv
302.042 115.95 302.078 115.928 302.119 115.896 cv
302.16 115.863 302.208 115.82 302.263 115.765 cv
302.321 115.707 302.365 115.658 302.397 115.617 cv
302.43 115.576 302.451 115.54 302.463 115.51 cv
302.474 115.481 302.478 115.455 302.475 115.433 cv
302.471 115.411 302.46 115.391 302.442 115.373 cv
300.407 113.337 li
300.361 113.131 300.327 112.951 300.307 112.797 cv
300.286 112.644 300.28 112.51 300.288 112.396 cv
300.296 112.283 300.316 112.187 300.348 112.109 cv
300.38 112.032 300.425 111.963 300.482 111.907 cv
300.53 111.858 300.579 111.818 300.63 111.786 cv
300.68 111.754 300.727 111.727 300.771 111.703 cv
300.814 111.681 300.855 111.661 300.891 111.645 cv
300.928 111.63 300.956 111.612 300.974 111.594 cv
300.993 111.576 301.002 111.556 301.002 111.535 cv
301.002 111.514 300.995 111.491 300.983 111.465 cv
300.97 111.439 300.948 111.407 300.915 111.37 cv
300.884 111.333 300.842 111.29 300.792 111.24 cv
300.739 111.187 300.696 111.145 300.664 111.116 cv
300.633 111.086 300.606 111.064 300.587 111.052 cv
300.568 111.039 300.551 111.03 300.535 111.025 cv
300.525 111.02 300.512 111.018 300.496 111.018 cv
300.49 111.018 300.483 111.018 300.475 111.019 cv
297.033 114.51 mo
296.767 114.624 296.508 114.807 296.253 115.062 cv
295.989 115.326 295.801 115.599 295.69 115.881 cv
295.577 116.163 295.531 116.446 295.554 116.732 cv
295.575 117.017 295.659 117.299 295.806 117.576 cv
295.953 117.854 296.152 118.119 296.404 118.37 cv
296.666 118.632 296.931 118.835 297.199 118.979 cv
297.467 119.124 297.736 119.205 298.007 119.224 cv
298.278 119.242 298.545 119.194 298.81 119.081 cv
299.075 118.967 299.335 118.784 299.589 118.529 cv
299.85 118.267 300.038 117.994 300.149 117.71 cv
300.262 117.426 300.307 117.141 300.285 116.856 cv
300.264 116.57 300.18 116.288 300.034 116.01 cv
299.889 115.731 299.69 115.466 299.437 115.213 cv
299.179 114.955 298.914 114.753 298.645 114.61 cv
298.375 114.467 298.105 114.386 297.835 114.367 cv
297.798 114.365 297.761 114.364 297.724 114.364 cv
297.491 114.364 297.261 114.413 297.033 114.51 cv
298.026 118.41 mo
297.843 118.371 297.66 118.293 297.48 118.176 cv
297.3 118.058 297.124 117.914 296.955 117.745 cv
296.779 117.568 296.635 117.386 296.524 117.199 cv
296.413 117.012 296.342 116.824 296.312 116.637 cv
296.282 116.449 296.297 116.265 296.359 116.085 cv
296.421 115.903 296.537 115.728 296.706 115.559 cv
296.889 115.376 297.074 115.257 297.262 115.199 cv
297.449 115.142 297.636 115.133 297.82 115.175 cv
298.004 115.215 298.185 115.294 298.366 115.412 cv
298.546 115.529 298.72 115.672 298.887 115.84 cv
299.067 116.018 299.211 116.201 299.324 116.387 cv
299.436 116.573 299.507 116.76 299.535 116.946 cv
299.564 117.132 299.547 117.316 299.484 117.498 cv
299.421 117.68 299.307 117.855 299.14 118.021 cv
298.958 118.204 298.772 118.325 298.584 118.381 cv
298.471 118.416 298.36 118.433 298.248 118.433 cv
298.174 118.433 298.1 118.425 298.026 118.41 cv
294.083 117.638 mo
294.041 117.644 293.984 117.659 293.913 117.681 cv
293.842 117.705 293.763 117.739 293.676 117.785 cv
293.588 117.831 293.496 117.888 293.4 117.956 cv
293.304 118.025 293.215 118.101 293.132 118.183 cv
292.944 118.371 292.805 118.561 292.714 118.752 cv
292.623 118.944 292.573 119.128 292.563 119.307 cv
292.553 119.484 292.579 119.652 292.644 119.81 cv
292.708 119.968 292.801 120.108 292.922 120.23 cv
293.06 120.367 293.2 120.463 293.343 120.517 cv
293.487 120.57 293.631 120.596 293.775 120.594 cv
293.919 120.592 294.063 120.569 294.205 120.525 cv
294.347 120.482 294.486 120.431 294.623 120.372 cv
294.759 120.314 294.891 120.256 295.018 120.2 cv
295.146 120.144 295.269 120.102 295.388 120.075 cv
295.507 120.047 295.62 120.041 295.723 120.056 cv
295.827 120.071 295.924 120.122 296.011 120.209 cv
296.096 120.294 296.153 120.383 296.184 120.476 cv
296.215 120.568 296.222 120.664 296.205 120.761 cv
296.187 120.858 296.151 120.956 296.093 121.055 cv
296.036 121.153 295.959 121.25 295.863 121.347 cv
295.735 121.476 295.605 121.574 295.476 121.641 cv
295.346 121.709 295.227 121.761 295.118 121.796 cv
295.009 121.831 294.915 121.858 294.835 121.877 cv
294.755 121.895 294.702 121.917 294.676 121.942 cv
294.66 121.958 294.65 121.977 294.646 121.997 cv
294.64 122.017 294.644 122.041 294.656 122.066 cv
294.667 122.091 294.685 122.121 294.711 122.155 cv
294.736 122.19 294.77 122.229 294.814 122.272 cv
294.885 122.343 294.947 122.393 294.999 122.423 cv
295.053 122.453 295.103 122.467 295.151 122.465 cv
295.199 122.463 295.265 122.448 295.349 122.421 cv
295.432 122.395 295.527 122.356 295.632 122.304 cv
295.737 122.25 295.849 122.183 295.966 122.1 cv
296.083 122.017 296.196 121.921 296.306 121.811 cv
296.485 121.633 296.628 121.447 296.733 121.254 cv
296.838 121.062 296.902 120.869 296.925 120.676 cv
296.948 120.484 296.927 120.297 296.862 120.115 cv
296.797 119.932 296.684 119.762 296.527 119.604 cv
296.394 119.47 296.257 119.378 296.115 119.327 cv
295.974 119.275 295.833 119.252 295.691 119.256 cv
295.548 119.261 295.406 119.287 295.262 119.333 cv
295.119 119.38 294.98 119.433 294.843 119.492 cv
294.707 119.55 294.573 119.608 294.442 119.666 cv
294.312 119.723 294.187 119.766 294.068 119.792 cv
293.948 119.82 293.836 119.827 293.729 119.811 cv
293.622 119.797 293.524 119.745 293.435 119.655 cv
293.37 119.591 293.323 119.52 293.292 119.441 cv
293.262 119.361 293.249 119.278 293.256 119.191 cv
293.263 119.104 293.292 119.013 293.343 118.918 cv
293.396 118.822 293.469 118.727 293.566 118.631 cv
293.674 118.523 293.782 118.44 293.891 118.381 cv
294 118.323 294.099 118.277 294.189 118.244 cv
294.28 118.21 294.358 118.187 294.422 118.173 cv
294.486 118.159 294.529 118.142 294.549 118.121 cv
294.563 118.108 294.571 118.091 294.575 118.072 cv
294.578 118.052 294.575 118.029 294.565 118.002 cv
294.554 117.976 294.537 117.948 294.512 117.915 cv
294.486 117.883 294.454 117.848 294.415 117.809 cv
294.378 117.772 294.346 117.742 294.317 117.721 cv
294.288 117.699 294.263 117.681 294.243 117.668 cv
294.223 117.654 294.201 117.644 294.18 117.638 cv
294.169 117.635 294.155 117.634 294.139 117.634 cv
294.123 117.634 294.104 117.635 294.083 117.638 cv
291.113 120.347 mo
291.084 120.358 291.052 120.377 291.017 120.405 cv
290.981 120.434 290.94 120.471 290.894 120.517 cv
290.847 120.566 290.808 120.607 290.779 120.643 cv
290.751 120.678 290.731 120.711 290.719 120.741 cv
290.708 120.771 290.704 120.796 290.707 120.818 cv
290.711 120.84 290.723 120.861 290.743 120.882 cv
291.118 121.257 li
290.928 121.259 290.759 121.267 290.609 121.281 cv
290.46 121.295 290.325 121.32 290.203 121.357 cv
290.082 121.393 289.971 121.442 289.871 121.503 cv
289.772 121.564 289.676 121.639 289.584 121.731 cv
289.366 121.949 289.215 122.182 289.131 122.43 cv
289.046 122.677 289.023 122.934 289.06 123.198 cv
289.098 123.463 289.195 123.731 289.352 124.003 cv
289.509 124.275 289.721 124.543 289.986 124.809 cv
290.211 125.034 290.448 125.225 290.697 125.382 cv
290.946 125.539 291.195 125.643 291.444 125.693 cv
291.695 125.743 291.943 125.733 292.19 125.663 cv
292.436 125.594 292.671 125.446 292.896 125.221 cv
292.985 125.132 293.064 125.037 293.13 124.936 cv
293.197 124.835 293.251 124.724 293.293 124.601 cv
293.335 124.478 293.367 124.342 293.386 124.192 cv
293.406 124.041 293.415 123.872 293.415 123.684 cv
295 125.27 li
295.019 125.288 295.039 125.301 295.061 125.306 cv
295.082 125.311 295.109 125.308 295.142 125.294 cv
295.174 125.28 295.21 125.258 295.25 125.227 cv
295.29 125.196 295.339 125.152 295.396 125.094 cv
295.451 125.039 295.494 124.991 295.527 124.95 cv
295.559 124.909 295.581 124.873 295.592 124.843 cv
295.603 124.814 295.608 124.787 295.604 124.762 cv
295.601 124.739 295.59 124.717 295.572 124.699 cv
291.249 120.377 li
291.228 120.356 291.208 120.343 291.187 120.339 cv
291.181 120.337 291.174 120.337 291.167 120.337 cv
291.151 120.337 291.133 120.34 291.113 120.347 cv
291.531 124.854 mo
291.356 124.798 291.183 124.708 291.01 124.584 cv
290.837 124.459 290.671 124.317 290.513 124.159 cv
290.366 124.013 290.236 123.853 290.122 123.683 cv
290.009 123.512 289.928 123.339 289.878 123.164 cv
289.829 122.988 289.821 122.816 289.852 122.646 cv
289.885 122.476 289.973 122.319 290.118 122.175 cv
290.274 122.019 290.472 121.919 290.715 121.876 cv
290.958 121.832 291.252 121.828 291.597 121.865 cv
292.834 123.104 li
292.857 123.305 292.866 123.484 292.864 123.642 cv
292.86 123.798 292.846 123.938 292.821 124.059 cv
292.795 124.181 292.758 124.287 292.709 124.377 cv
292.659 124.468 292.596 124.551 292.521 124.626 cv
292.372 124.776 292.213 124.865 292.045 124.894 cv
291.987 124.903 291.929 124.908 291.871 124.908 cv
291.759 124.908 291.646 124.89 291.531 124.854 cv
f
336.756 109.04 mo
336.656 109.062 336.553 109.097 336.445 109.145 cv
336.337 109.193 336.228 109.255 336.116 109.329 cv
336.005 109.404 335.9 109.49 335.802 109.589 cv
335.598 109.793 335.442 110.017 335.334 110.259 cv
335.226 110.502 335.177 110.759 335.187 111.028 cv
335.198 111.297 335.276 111.579 335.419 111.872 cv
335.564 112.166 335.789 112.464 336.094 112.77 cv
336.362 113.038 336.629 113.244 336.895 113.389 cv
337.161 113.533 337.422 113.618 337.679 113.644 cv
337.936 113.669 338.187 113.632 338.433 113.533 cv
338.677 113.435 338.911 113.274 339.134 113.052 cv
339.242 112.944 339.335 112.829 339.415 112.707 cv
339.496 112.586 339.562 112.466 339.615 112.347 cv
339.668 112.228 339.707 112.113 339.734 112.001 cv
339.76 111.89 339.774 111.806 339.774 111.748 cv
339.774 111.691 339.77 111.651 339.763 111.628 cv
339.757 111.605 339.746 111.581 339.732 111.556 cv
339.719 111.53 339.698 111.502 339.672 111.472 cv
339.646 111.44 339.613 111.406 339.574 111.366 cv
339.528 111.321 339.487 111.283 339.451 111.253 cv
339.414 111.223 339.38 111.202 339.351 111.188 cv
339.321 111.174 339.296 111.168 339.275 111.17 cv
339.254 111.173 339.235 111.182 339.22 111.198 cv
339.192 111.226 339.174 111.285 339.164 111.374 cv
339.155 111.463 339.139 111.568 339.117 111.69 cv
339.093 111.811 339.054 111.942 338.996 112.082 cv
338.939 112.221 338.845 112.357 338.714 112.488 cv
338.577 112.626 338.43 112.723 338.274 112.78 cv
338.119 112.837 337.953 112.852 337.779 112.824 cv
337.605 112.798 337.424 112.727 337.236 112.615 cv
337.048 112.502 336.854 112.347 336.654 112.148 cv
336.256 111.748 336.024 111.371 335.959 111.015 cv
335.896 110.661 336 110.347 336.273 110.074 cv
336.406 109.941 336.54 109.845 336.675 109.785 cv
336.81 109.725 336.935 109.684 337.05 109.661 cv
337.165 109.639 337.263 109.623 337.345 109.616 cv
337.428 109.61 337.487 109.589 337.521 109.555 cv
337.551 109.525 337.558 109.482 337.543 109.425 cv
337.528 109.369 337.476 109.296 337.387 109.207 cv
337.345 109.166 337.31 109.133 337.281 109.108 cv
337.25 109.082 337.221 109.062 337.192 109.047 cv
337.164 109.032 337.137 109.022 337.11 109.017 cv
337.084 109.01 337.043 109.008 336.988 109.008 cv
336.933 109.008 336.856 109.018 336.756 109.04 cv
333.021 112.572 mo
332.809 112.644 332.601 112.782 332.395 112.989 cv
332.218 113.166 332.089 113.385 332.006 113.649 cv
331.924 113.913 331.892 114.229 331.913 114.598 cv
331.504 114.189 li
331.486 114.171 331.466 114.159 331.446 114.155 cv
331.425 114.15 331.4 114.152 331.371 114.16 cv
331.343 114.167 331.31 114.186 331.274 114.217 cv
331.237 114.246 331.193 114.286 331.143 114.337 cv
331.09 114.39 331.049 114.434 331.021 114.469 cv
330.992 114.505 330.973 114.538 330.963 114.569 cv
330.952 114.6 330.95 114.625 330.955 114.644 cv
330.961 114.664 330.973 114.683 330.991 114.701 cv
334.087 117.796 li
334.105 117.815 334.124 117.826 334.145 117.83 cv
334.166 117.836 334.192 117.831 334.222 117.819 cv
334.253 117.806 334.289 117.783 334.33 117.752 cv
334.372 117.72 334.42 117.676 334.475 117.621 cv
334.532 117.564 334.577 117.514 334.609 117.473 cv
334.641 117.432 334.664 117.397 334.674 117.367 cv
334.686 117.337 334.69 117.311 334.687 117.289 cv
334.683 117.267 334.672 117.247 334.654 117.229 cv
332.491 115.066 li
332.452 114.715 332.453 114.418 332.494 114.175 cv
332.536 113.932 332.628 113.74 332.77 113.598 cv
332.88 113.488 332.997 113.411 333.122 113.369 cv
333.247 113.327 333.375 113.318 333.505 113.343 cv
333.637 113.368 333.769 113.421 333.905 113.501 cv
334.04 113.581 334.195 113.71 334.372 113.886 cv
336.184 115.698 li
336.202 115.717 336.223 115.728 336.245 115.731 cv
336.266 115.735 336.292 115.731 336.322 115.719 cv
336.352 115.708 336.387 115.686 336.428 115.654 cv
336.47 115.622 336.519 115.577 336.576 115.52 cv
336.632 115.465 336.675 115.416 336.707 115.375 cv
336.739 115.334 336.76 115.299 336.772 115.269 cv
336.784 115.239 336.787 115.213 336.785 115.191 cv
336.781 115.17 336.77 115.149 336.751 115.131 cv
334.864 113.243 li
334.644 113.023 334.437 112.853 334.241 112.734 cv
334.046 112.615 333.847 112.541 333.643 112.51 cv
333.583 112.502 333.522 112.497 333.462 112.497 cv
333.316 112.497 333.17 112.522 333.021 112.572 cv
329.375 116.243 mo
329.126 116.335 328.88 116.504 328.637 116.747 cv
328.41 116.973 328.245 117.218 328.14 117.48 cv
328.036 117.743 327.993 118.013 328.012 118.29 cv
328.03 118.567 328.111 118.847 328.254 119.128 cv
328.397 119.409 328.602 119.682 328.867 119.948 cv
329.147 120.228 329.425 120.439 329.704 120.584 cv
329.981 120.728 330.254 120.806 330.525 120.815 cv
330.795 120.824 331.063 120.768 331.324 120.647 cv
331.587 120.528 331.846 120.339 332.1 120.086 cv
332.247 119.939 332.374 119.79 332.482 119.638 cv
332.59 119.487 332.679 119.349 332.75 119.223 cv
332.821 119.097 332.873 118.988 332.907 118.898 cv
332.94 118.807 332.956 118.749 332.956 118.724 cv
332.956 118.699 332.953 118.674 332.948 118.653 cv
332.942 118.631 332.933 118.611 332.918 118.59 cv
332.905 118.569 332.888 118.547 332.869 118.522 cv
332.849 118.498 332.825 118.471 332.795 118.441 cv
332.754 118.4 332.717 118.367 332.684 118.342 cv
332.653 118.317 332.625 118.299 332.602 118.29 cv
332.579 118.281 332.557 118.279 332.537 118.284 cv
332.516 118.288 332.497 118.298 332.481 118.314 cv
332.454 118.342 332.425 118.395 332.395 118.474 cv
332.365 118.552 332.323 118.647 332.269 118.762 cv
332.214 118.876 332.142 119.002 332.05 119.142 cv
331.959 119.281 331.84 119.424 331.693 119.572 cv
331.505 119.758 331.322 119.889 331.14 119.966 cv
330.958 120.043 330.777 120.071 330.598 120.053 cv
330.419 120.035 330.244 119.975 330.072 119.872 cv
329.9 119.769 329.727 119.631 329.555 119.459 cv
331.594 117.422 li
331.651 117.364 331.684 117.294 331.691 117.211 cv
331.698 117.128 331.657 117.042 331.567 116.953 cv
331.464 116.849 li
331.262 116.648 331.046 116.484 330.818 116.358 cv
330.588 116.232 330.352 116.158 330.11 116.136 cv
330.065 116.132 330.02 116.129 329.974 116.13 cv
329.777 116.13 329.577 116.167 329.375 116.243 cv
328.842 118.615 mo
328.766 118.46 328.72 118.303 328.704 118.144 cv
328.688 117.986 328.707 117.827 328.76 117.668 cv
328.814 117.51 328.911 117.36 329.052 117.219 cv
329.326 116.945 329.618 116.822 329.928 116.852 cv
330.236 116.883 330.537 117.05 330.828 117.355 cv
329.139 119.043 li
329.018 118.913 328.919 118.77 328.842 118.615 cv
321.65 121.419 mo
321.556 121.42 321.441 121.488 321.305 121.623 cv
321.17 121.759 321.101 121.875 321.1 121.972 cv
321.1 122.069 321.165 122.184 321.298 122.318 cv
321.429 122.448 321.541 122.513 321.637 122.512 cv
321.732 122.511 321.846 122.444 321.979 122.311 cv
322.114 122.175 322.183 122.058 322.185 121.96 cv
322.188 121.861 322.122 121.746 321.99 121.613 cv
321.859 121.483 321.747 121.419 321.652 121.419 cv
321.652 121.419 321.651 121.419 321.65 121.419 cv
322.83 122.705 mo
322.799 122.717 322.763 122.74 322.721 122.771 cv
322.681 122.804 322.632 122.848 322.577 122.903 cv
322.522 122.958 322.478 123.005 322.447 123.047 cv
322.414 123.088 322.392 123.124 322.379 123.156 cv
322.367 123.186 322.363 123.213 322.368 123.236 cv
322.372 123.259 322.383 123.278 322.398 123.294 cv
325.627 126.523 li
325.795 126.691 325.912 126.824 325.978 126.922 cv
326.045 127.021 326.086 127.113 326.104 127.199 cv
326.121 127.285 326.114 127.367 326.083 127.443 cv
326.052 127.521 325.999 127.596 325.924 127.672 cv
325.87 127.725 325.821 127.768 325.776 127.802 cv
325.73 127.837 325.699 127.861 325.686 127.875 cv
325.67 127.891 325.661 127.908 325.659 127.926 cv
325.656 127.944 325.661 127.967 325.671 127.994 cv
325.681 128.02 325.699 128.05 325.726 128.083 cv
325.752 128.116 325.786 128.153 325.827 128.195 cv
325.857 128.224 325.883 128.25 325.905 128.269 cv
325.926 128.288 325.949 128.305 325.973 128.321 cv
325.997 128.335 326.022 128.345 326.047 128.35 cv
326.072 128.354 326.104 128.349 326.143 128.332 cv
326.183 128.316 326.232 128.287 326.293 128.244 cv
326.354 128.202 326.421 128.144 326.494 128.071 cv
326.657 127.908 326.771 127.745 326.836 127.581 cv
326.902 127.417 326.923 127.251 326.9 127.08 cv
326.877 126.911 326.813 126.738 326.706 126.563 cv
326.599 126.387 326.431 126.185 326.202 125.956 cv
322.97 122.724 li
322.954 122.707 322.934 122.697 322.911 122.693 cv
322.905 122.692 322.898 122.691 322.891 122.691 cv
322.873 122.691 322.853 122.696 322.83 122.705 cv
330.894 122.756 mo
327.582 126.068 li
327.544 126.107 327.534 126.156 327.552 126.216 cv
327.57 126.275 327.618 126.344 327.696 126.422 cv
327.777 126.503 327.844 126.549 327.899 126.563 cv
327.954 126.576 328.001 126.564 328.04 126.525 cv
331.351 123.213 li
331.39 123.174 331.401 123.128 331.383 123.073 cv
331.364 123.018 331.315 122.95 331.234 122.869 cv
331.157 122.792 331.09 122.744 331.034 122.727 cv
331.016 122.722 330.999 122.719 330.983 122.719 cv
330.949 122.719 330.919 122.731 330.894 122.756 cv
321.571 123.991 mo
321.546 123.993 321.511 124.005 321.467 124.027 cv
321.422 124.049 321.374 124.076 321.324 124.108 cv
321.273 124.14 321.227 124.173 321.186 124.208 cv
321.145 124.242 321.109 124.274 321.08 124.304 cv
321.013 124.371 320.956 124.445 320.908 124.527 cv
320.859 124.61 320.824 124.707 320.803 124.818 cv
320.781 124.929 320.772 125.061 320.776 125.214 cv
320.778 125.366 320.8 125.547 320.839 125.755 cv
320.389 125.305 li
320.37 125.286 320.351 125.275 320.33 125.271 cv
320.309 125.266 320.284 125.267 320.256 125.275 cv
320.227 125.283 320.194 125.302 320.158 125.332 cv
320.121 125.362 320.078 125.402 320.028 125.452 cv
319.975 125.506 319.934 125.55 319.905 125.585 cv
319.876 125.621 319.857 125.654 319.847 125.685 cv
319.836 125.715 319.834 125.74 319.84 125.76 cv
319.846 125.78 319.858 125.799 319.876 125.817 cv
322.971 128.912 li
322.99 128.93 323.008 128.942 323.029 128.946 cv
323.05 128.951 323.076 128.947 323.107 128.934 cv
323.138 128.922 323.174 128.899 323.215 128.867 cv
323.256 128.835 323.305 128.791 323.359 128.736 cv
323.417 128.679 323.461 128.63 323.494 128.589 cv
323.526 128.548 323.548 128.512 323.559 128.482 cv
323.57 128.452 323.575 128.427 323.571 128.404 cv
323.567 128.383 323.557 128.363 323.539 128.345 cv
321.503 126.309 li
321.457 126.102 321.424 125.922 321.403 125.769 cv
321.382 125.615 321.376 125.482 321.384 125.369 cv
321.392 125.254 321.412 125.159 321.444 125.081 cv
321.476 125.003 321.521 124.936 321.578 124.878 cv
321.626 124.83 321.676 124.79 321.726 124.758 cv
321.776 124.726 321.823 124.698 321.867 124.676 cv
321.91 124.652 321.951 124.632 321.987 124.617 cv
322.024 124.601 322.052 124.584 322.07 124.565 cv
322.089 124.547 322.098 124.527 322.098 124.506 cv
322.098 124.486 322.091 124.462 322.079 124.436 cv
322.066 124.41 322.044 124.379 322.011 124.342 cv
321.98 124.305 321.938 124.262 321.888 124.211 cv
321.835 124.158 321.793 124.117 321.76 124.087 cv
321.729 124.057 321.703 124.037 321.683 124.024 cv
321.664 124.011 321.647 124.002 321.631 123.996 cv
321.62 123.992 321.606 123.99 321.589 123.99 cv
321.583 123.99 321.577 123.99 321.571 123.991 cv
f
370.823 109.04 mo
370.723 109.062 370.62 109.097 370.512 109.145 cv
370.404 109.193 370.295 109.255 370.183 109.329 cv
370.072 109.404 369.967 109.49 369.869 109.589 cv
369.665 109.793 369.509 110.017 369.401 110.259 cv
369.293 110.502 369.244 110.759 369.255 111.028 cv
369.265 111.297 369.343 111.579 369.487 111.872 cv
369.631 112.166 369.856 112.464 370.161 112.77 cv
370.429 113.038 370.696 113.244 370.962 113.389 cv
371.228 113.533 371.49 113.618 371.746 113.644 cv
372.003 113.669 372.254 113.632 372.5 113.533 cv
372.745 113.435 372.978 113.274 373.201 113.052 cv
373.309 112.944 373.402 112.829 373.482 112.707 cv
373.564 112.586 373.629 112.466 373.682 112.347 cv
373.735 112.228 373.775 112.113 373.801 112.001 cv
373.827 111.89 373.841 111.806 373.841 111.748 cv
373.841 111.691 373.837 111.651 373.83 111.628 cv
373.824 111.605 373.813 111.581 373.799 111.556 cv
373.786 111.53 373.765 111.502 373.739 111.472 cv
373.713 111.44 373.68 111.406 373.641 111.366 cv
373.595 111.321 373.554 111.283 373.518 111.253 cv
373.481 111.223 373.447 111.202 373.418 111.188 cv
373.388 111.174 373.363 111.168 373.342 111.17 cv
373.321 111.173 373.302 111.182 373.287 111.198 cv
373.259 111.226 373.241 111.285 373.231 111.374 cv
373.222 111.463 373.206 111.568 373.184 111.69 cv
373.161 111.811 373.121 111.942 373.063 112.082 cv
373.006 112.221 372.912 112.357 372.781 112.488 cv
372.644 112.626 372.497 112.723 372.341 112.78 cv
372.186 112.837 372.02 112.852 371.846 112.824 cv
371.672 112.798 371.491 112.727 371.303 112.615 cv
371.115 112.502 370.921 112.347 370.721 112.148 cv
370.323 111.748 370.091 111.371 370.026 111.015 cv
369.963 110.661 370.067 110.347 370.34 110.074 cv
370.473 109.941 370.607 109.845 370.742 109.785 cv
370.877 109.725 371.002 109.684 371.117 109.661 cv
371.232 109.639 371.331 109.623 371.413 109.616 cv
371.495 109.61 371.554 109.589 371.588 109.555 cv
371.618 109.525 371.625 109.482 371.611 109.425 cv
371.595 109.369 371.543 109.296 371.454 109.207 cv
371.413 109.166 371.377 109.133 371.348 109.108 cv
371.318 109.082 371.288 109.062 371.259 109.047 cv
371.231 109.032 371.204 109.022 371.177 109.017 cv
371.151 109.01 371.11 109.008 371.055 109.008 cv
371 109.008 370.923 109.018 370.823 109.04 cv
367.175 112.509 mo
366.927 112.602 366.681 112.77 366.438 113.013 cv
366.211 113.239 366.045 113.484 365.94 113.747 cv
365.837 114.01 365.794 114.28 365.812 114.557 cv
365.831 114.834 365.911 115.113 366.055 115.394 cv
366.198 115.675 366.402 115.948 366.669 116.215 cv
366.948 116.494 367.227 116.706 367.504 116.85 cv
367.781 116.995 368.056 117.072 368.326 117.081 cv
368.596 117.09 368.863 117.035 369.126 116.914 cv
369.388 116.793 369.647 116.606 369.9 116.352 cv
370.047 116.205 370.175 116.056 370.282 115.905 cv
370.39 115.753 370.479 115.614 370.55 115.488 cv
370.621 115.363 370.674 115.254 370.707 115.164 cv
370.74 115.074 370.757 115.015 370.757 114.99 cv
370.757 114.965 370.755 114.941 370.748 114.92 cv
370.743 114.898 370.733 114.876 370.719 114.856 cv
370.705 114.835 370.689 114.813 370.669 114.789 cv
370.65 114.765 370.625 114.738 370.595 114.708 cv
370.554 114.667 370.517 114.634 370.486 114.608 cv
370.453 114.583 370.426 114.566 370.403 114.557 cv
370.379 114.548 370.358 114.545 370.337 114.55 cv
370.316 114.555 370.298 114.565 370.282 114.581 cv
370.254 114.609 370.225 114.662 370.196 114.74 cv
370.165 114.818 370.123 114.914 370.069 115.029 cv
370.015 115.142 369.942 115.269 369.851 115.408 cv
369.76 115.547 369.64 115.691 369.493 115.838 cv
369.306 116.025 369.122 116.156 368.94 116.233 cv
368.758 116.308 368.578 116.338 368.399 116.32 cv
368.22 116.302 368.044 116.242 367.872 116.138 cv
367.7 116.036 367.528 115.898 367.356 115.726 cv
369.394 113.688 li
369.451 113.63 369.484 113.56 369.491 113.477 cv
369.498 113.394 369.457 113.309 369.368 113.219 cv
369.264 113.116 li
369.063 112.915 368.848 112.75 368.618 112.624 cv
368.388 112.498 368.154 112.424 367.912 112.402 cv
367.865 112.398 367.819 112.396 367.773 112.396 cv
367.576 112.396 367.377 112.433 367.175 112.509 cv
366.642 114.881 mo
366.566 114.726 366.52 114.57 366.505 114.411 cv
366.489 114.252 366.508 114.093 366.561 113.935 cv
366.615 113.776 366.712 113.626 366.852 113.485 cv
367.127 113.211 367.418 113.089 367.728 113.119 cv
368.037 113.149 368.337 113.317 368.629 113.622 cv
366.939 115.31 li
366.818 115.179 366.719 115.037 366.642 114.881 cv
362.603 114.024 mo
362.574 114.037 362.538 114.058 362.496 114.09 cv
362.454 114.121 362.404 114.165 362.347 114.222 cv
362.292 114.277 362.25 114.326 362.219 114.366 cv
362.189 114.408 362.168 114.444 362.152 114.475 cv
362.137 114.506 362.133 114.533 362.141 114.556 cv
362.147 114.579 362.159 114.598 362.175 114.615 cv
363.973 116.413 li
363.672 116.406 363.408 116.438 363.179 116.509 cv
362.95 116.58 362.745 116.706 362.564 116.887 cv
362.346 117.105 362.194 117.338 362.109 117.585 cv
362.025 117.833 362.001 118.089 362.041 118.352 cv
362.08 118.616 362.178 118.883 362.334 119.155 cv
362.492 119.427 362.703 119.696 362.969 119.962 cv
363.194 120.186 363.43 120.377 363.679 120.534 cv
363.928 120.691 364.177 120.795 364.428 120.845 cv
364.677 120.896 364.926 120.885 365.176 120.813 cv
365.424 120.741 365.662 120.591 365.888 120.364 cv
366.097 120.155 366.24 119.914 366.317 119.64 cv
366.393 119.367 366.425 119.06 366.411 118.72 cv
366.821 119.129 li
366.839 119.148 366.859 119.16 366.883 119.164 cv
366.905 119.169 366.931 119.164 366.96 119.152 cv
366.988 119.139 367.021 119.119 367.058 119.091 cv
367.094 119.064 367.137 119.026 367.185 118.978 cv
367.231 118.932 367.268 118.891 367.295 118.855 cv
367.323 118.818 367.342 118.785 367.353 118.758 cv
367.365 118.73 367.368 118.706 367.362 118.684 cv
367.356 118.662 367.344 118.642 367.327 118.624 cv
362.745 114.043 li
362.729 114.027 362.709 114.017 362.683 114.012 cv
362.677 114.011 362.669 114.011 362.662 114.011 cv
362.643 114.011 362.624 114.015 362.603 114.024 cv
364.511 120.005 mo
364.336 119.948 364.162 119.858 363.988 119.733 cv
363.816 119.608 363.651 119.467 363.495 119.312 cv
363.349 119.165 363.218 119.007 363.105 118.836 cv
362.991 118.665 362.91 118.492 362.861 118.316 cv
362.811 118.141 362.803 117.968 362.835 117.799 cv
362.867 117.629 362.955 117.472 363.1 117.327 cv
363.256 117.171 363.455 117.072 363.698 117.028 cv
363.941 116.984 364.235 116.982 364.579 117.018 cv
365.816 118.256 li
365.84 118.458 365.849 118.637 365.846 118.794 cv
365.842 118.951 365.828 119.09 365.803 119.212 cv
365.778 119.333 365.74 119.439 365.691 119.53 cv
365.642 119.62 365.58 119.704 365.503 119.78 cv
365.355 119.928 365.196 120.017 365.027 120.046 cv
364.97 120.056 364.914 120.061 364.856 120.061 cv
364.743 120.061 364.628 120.042 364.511 120.005 cv
355.717 121.419 mo
355.623 121.42 355.508 121.488 355.372 121.623 cv
355.237 121.759 355.168 121.875 355.168 121.972 cv
355.167 122.069 355.232 122.184 355.366 122.318 cv
355.496 122.448 355.608 122.513 355.704 122.512 cv
355.799 122.511 355.914 122.444 356.046 122.311 cv
356.182 122.175 356.25 122.058 356.253 121.96 cv
356.255 121.861 356.189 121.746 356.057 121.613 cv
355.927 121.483 355.814 121.419 355.719 121.419 cv
355.719 121.419 355.718 121.419 355.717 121.419 cv
356.897 122.705 mo
356.867 122.717 356.83 122.74 356.789 122.771 cv
356.748 122.804 356.699 122.848 356.644 122.903 cv
356.59 122.958 356.546 123.005 356.514 123.047 cv
356.482 123.088 356.459 123.124 356.446 123.156 cv
356.434 123.186 356.43 123.213 356.435 123.236 cv
356.439 123.259 356.45 123.278 356.465 123.294 cv
359.694 126.523 li
359.862 126.691 359.979 126.824 360.046 126.922 cv
360.112 127.021 360.154 127.113 360.171 127.199 cv
360.189 127.285 360.181 127.367 360.151 127.443 cv
360.119 127.521 360.066 127.596 359.991 127.672 cv
359.938 127.725 359.889 127.768 359.843 127.802 cv
359.797 127.837 359.767 127.861 359.753 127.875 cv
359.737 127.891 359.728 127.908 359.726 127.926 cv
359.723 127.944 359.728 127.967 359.738 127.994 cv
359.749 128.02 359.767 128.05 359.793 128.083 cv
359.819 128.116 359.853 128.153 359.894 128.195 cv
359.924 128.224 359.95 128.25 359.972 128.269 cv
359.993 128.288 360.017 128.305 360.04 128.321 cv
360.064 128.335 360.089 128.345 360.114 128.35 cv
360.139 128.354 360.172 128.349 360.21 128.332 cv
360.25 128.316 360.299 128.287 360.361 128.244 cv
360.421 128.202 360.488 128.144 360.561 128.071 cv
360.724 127.908 360.838 127.745 360.903 127.581 cv
360.969 127.417 360.991 127.251 360.967 127.08 cv
360.945 126.911 360.88 126.738 360.773 126.563 cv
360.667 126.387 360.498 126.185 360.269 125.956 cv
357.037 122.724 li
357.021 122.707 357.001 122.697 356.978 122.693 cv
356.972 122.692 356.965 122.691 356.958 122.691 cv
356.94 122.691 356.92 122.696 356.897 122.705 cv
364.961 122.756 mo
361.649 126.068 li
361.611 126.107 361.601 126.156 361.619 126.216 cv
361.637 126.275 361.685 126.344 361.764 126.422 cv
361.844 126.503 361.911 126.549 361.966 126.563 cv
362.021 126.576 362.068 126.564 362.107 126.525 cv
365.418 123.213 li
365.458 123.174 365.468 123.128 365.45 123.073 cv
365.431 123.018 365.382 122.95 365.301 122.869 cv
365.224 122.792 365.157 122.744 365.101 122.727 cv
365.083 122.722 365.066 122.719 365.05 122.719 cv
365.016 122.719 364.986 122.731 364.961 122.756 cv
355.638 123.991 mo
355.613 123.993 355.578 124.005 355.534 124.027 cv
355.489 124.049 355.441 124.076 355.391 124.108 cv
355.34 124.14 355.294 124.173 355.253 124.208 cv
355.212 124.242 355.176 124.274 355.147 124.304 cv
355.08 124.371 355.023 124.445 354.975 124.527 cv
354.926 124.61 354.891 124.707 354.87 124.818 cv
354.848 124.929 354.839 125.061 354.843 125.214 cv
354.845 125.366 354.867 125.547 354.906 125.755 cv
354.456 125.305 li
354.437 125.286 354.418 125.275 354.397 125.271 cv
354.376 125.266 354.352 125.267 354.323 125.275 cv
354.294 125.283 354.262 125.302 354.225 125.332 cv
354.188 125.362 354.145 125.402 354.095 125.452 cv
354.042 125.506 354.001 125.55 353.972 125.585 cv
353.943 125.621 353.924 125.654 353.914 125.685 cv
353.904 125.715 353.901 125.74 353.907 125.76 cv
353.913 125.78 353.925 125.799 353.943 125.817 cv
357.038 128.912 li
357.057 128.93 357.076 128.942 357.096 128.946 cv
357.117 128.951 357.143 128.947 357.174 128.934 cv
357.205 128.922 357.241 128.899 357.283 128.867 cv
357.323 128.835 357.372 128.791 357.426 128.736 cv
357.484 128.679 357.528 128.63 357.561 128.589 cv
357.593 128.548 357.615 128.512 357.626 128.482 cv
357.637 128.452 357.642 128.427 357.638 128.404 cv
357.634 128.383 357.624 128.363 357.606 128.345 cv
355.57 126.309 li
355.524 126.102 355.491 125.922 355.47 125.769 cv
355.449 125.615 355.443 125.482 355.451 125.369 cv
355.459 125.254 355.479 125.159 355.511 125.081 cv
355.544 125.003 355.588 124.936 355.645 124.878 cv
355.693 124.83 355.743 124.79 355.793 124.758 cv
355.843 124.726 355.89 124.698 355.934 124.676 cv
355.978 124.652 356.018 124.632 356.055 124.617 cv
356.091 124.601 356.119 124.584 356.137 124.565 cv
356.156 124.547 356.165 124.527 356.165 124.506 cv
356.165 124.486 356.158 124.462 356.146 124.436 cv
356.133 124.41 356.111 124.379 356.078 124.342 cv
356.047 124.305 356.005 124.262 355.955 124.211 cv
355.902 124.158 355.86 124.117 355.827 124.087 cv
355.796 124.057 355.77 124.037 355.75 124.024 cv
355.731 124.011 355.714 124.002 355.698 123.996 cv
355.688 123.992 355.673 123.99 355.656 123.99 cv
355.651 123.99 355.645 123.99 355.638 123.991 cv
f
136.44 5.03998 mo
143.04 5.03998 li
143.04 11.64 li
136.44 11.64 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.702 colr
ef
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 colr
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if

2 0 3 <> PBAAAA+Calibri AddT42Char 
2 322 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>PBAAAA+Calibri AddT42Char 
2 672 271 <00020099ffed03d50571002a003d0085b53f3f010a2136b8fff6b30c014d
36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36b801f840
1b152b120c014d2b200d014d2b180b014d2b1810014d2b100f014d2bb802
0a400900150a363521040530b80105b6264a1b46104c39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b323931305d01
140e0223222e022715140e0223222e023511343e0233321e0215113e0333
321e0207342e0223220e020711161633323e0203d53363905d2b49464627
08121b15141c12060713201819201208284b484828628b5728ae15345640
203e404527447c433e58371901e775bb844611263a296e080c070404070c
080538080c080404080c08fde5293823104e83b0754582643d122a4232fe
9953573c637b>PBAAAA+Calibri AddT42Char 
2 1280 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>PBAAAA+Calibri AddT42Char 
2 1602 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>PBAAAA+Calibri AddT42Char 
2 1844 367 <00010099fffa013e057100150040b73f174f176f170300b8fff0b30d014d
00b8fff6b30c014d00b8ffe8b30b014d00b8fff0b40f10014c00b801f8b4
0a1046054c003f3f012fe12b2b2b2b31305d25140e0223222e023511343e
0233321e0215013e0812201918201307071320181920120819080b080404
080b080538080c080404080c0800>PBAAAA+Calibri AddT42Char 
2 1978 381 <0002005affed03de03ca0013002700a8401c3f2901281201291101260d01
260c012608012607012a03012902011eb8ffe8b310014d1eb8fff0b30f01
4d1eb8ffe0b30d014d1eb8ffeeb30c014d1eb8ffe8b30b014d1eb8020a40
1e2f0a010a141810014d14100f014d14200d014d14120c014d14180b014d
14ba020a0000ffc0b70f004d7000010019b80101b20f4a23b80102b1054d
003fed3fed012f5d2be12b2b2b2b2b2f5de12b2b2b2b2b31305d5d5d5d5d
5d5d5d5d01140e0223222e0235343e0233321e0207342e0223220e021514
1e0233323e0203de3a73ad726fa56e363973ac736fa56e37ae1b3e6a4f49
6944211b3f6a4f486a442001e56eb9864b427eb4726eb9864a427eb47c49
826239345f824d4a826139345e82>PBAAAA+Calibri AddT42Char 
2 2262 393 <00020099fe9403d503ca002a003d0080b53f3f0121360ab8fff0b30d014d
0ab8fff6b30c014d0ab8fff0b40f10014c0ab8ffe8b30b014d0ab801f840
17152b200d014d2b120c014d2b180f10014c2b180b014d2bb8020a400900
150a363521040530b80105b6264a1b49104f39b80105b1054d003fed3f3f
3fed121739012fd4e12b2b2b2b10e12b2b2b2b323931305d01140e022322
2e022711140e0223222e023511343e0233321e0215153e0333321e020734
2e0223220e020711161633323e0203d53363925e28444140240812201918
20130706121c14151b1207294c4d512d628a5728ae15335640203e404627
447a433e59371a01e976bc834710223423fe3e080c080404080c0804e909
0b080303080b09792a3e29154c84af754581643c13294331fe9a53583c64
7c00>PBAAAA+Calibri AddT42Char 
2 2564 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>PBAAAA+Calibri AddT42Char 
2 2806 410 <00010021ffef026d04ad003a005cb4290011232db8fff0b30f014d2db8ff
f0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b30b014d2d
b801f8400c170d2ded23481d0ded174831b80104b1074d003fed3fedcd3f
ed012f33e12b2b2b2b2b32cdc432313025140e0423222e02351123222635
343e02333335343e0233321e02151533321e02151406232311141633323e
0233321e02026d081020292e174664401d7e0f1205080d087d0713201819
201208e7080c0904120fe7374717241c1408050905045b1d22100e090625
4b734e020e2024131a1107d6070c090404090c07d607111a132420fe0a5d
5f090a09050e1800>PBAAAA+Calibri AddT42Char 
2 3054 449 <00010035fffa058403bc004500deb90047ffc0403d0f014d38080c014d29
380137080c014d252e01262101262001261f01261e01261d01271c012804
012903013a3b013b3a013b2d013c2c01102015014d10b8ffe0b310014d10
b8ffe0400a0d014d10200c014d100fb8ffe0b310014d0fb8ffe0400c0d01
4d0f200c014d0f414910b8ffe040200f014d3f104f106f107f1004104012
164810334925493a902c012c200f014d2cb8ffc04010131648672c772c02
452c012c174c094c003f3fd55d5d2b2b5dc43f3fcd2b5d2b3f012f2b2b2b
2f2b2b2b2b3130005d5d5d5d015d5d5d5d5d5d5d5d5d2b5d2b2b01140607
010e0323222e0227032707030e0323222e022701262635343e0233321e02
17131737133e0333321e0217131737133e0333321e0205840405fef7030d
17281e1f2a190c03bd0202af030d1a291e1f27190c03fef9050408132017
1c22120803d90202c70209121f19181f120802d70201d6020913211a181d
1107039f07140ffca90b0e080304080e0a028d0909fd730b0e080304080e
0a03570f1407090b070203070d09fd1a090902e6090d070303070c08fd18
090902e6090d070302080a00>PBAAAA+Calibri AddT42Char 
2 3486 455 <00010022fe94037c03bc00240052b9001bfff040350b014d371b01291b01
18180b014d261801260e360e022709011a400b014d3a1a0119380b014d3b
19011f49190a13490a4b044f004b003f3f3f3f12393f31305d2b5d2b015d
5d5d2b5d5d2b2103060623222e023713262627012634363633321e021701
33133e023332161614070233780631321a201102067c091003febf081024
1e1e22140905010103f8061122201c241106feb51011050c140e01390412
0a035c15180e0503080f0dfd2e02d6130b05050e1812>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/space 3 def
/a 258 def
/b 271 def
/e 286 def
/i 349 def
/l 367 def
/o 381 def
/p 393 def
/r 396 def
/t 410 def
/w 449 def
/y 455 def
end
PBAAAA+Calibri /Encoding get
dup 32 /space put
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 119 /w put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AQWKJZ+Calibri*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/.notdef /four /.notdef /six /.notdef /eight 40{/.notdef}rp /a 
/b 2{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp 
/o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w 
/.notdef /y 134{/.notdef}rp]
AQWKJZ+Calibri nf
AQWKJZ+Calibri*1 [12 0 0 -12 0 0 ]msf
145.987 11.7997 mo
(write probability)
[8.51996 4.19998 2.76006 3.96008 6 2.51999 6.35992 3.95998 6.35991 6.35992 5.76006 6.35992 
2.76006 2.76004 2.76004 4.08008 0 ]xsh
240.24 5.03998 mo
246.84 5.03998 li
246.84 11.64 li
240.24 11.64 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.149 colr
ef
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0 colr
%ADOBeginSubsetFont: PBAAAA+Calibri AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+Calibri gcheck setglobal} if
2 978 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>PBAAAA+Calibri AddT42Char 
PBAAAA+Calibri /CharStrings get begin
/d 282 def
end
PBAAAA+Calibri /Encoding get
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/AQWKJZ+Calibri*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/.notdef /four /.notdef /six /.notdef /eight 40{/.notdef}rp /a 
/b /.notdef /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l 
2{/.notdef}rp /o /p /.notdef /r /.notdef /t 2{/.notdef}rp 
/w /.notdef /y 134{/.notdef}rp]
AQWKJZ+Calibri nf
AQWKJZ+Calibri*1 [12 0 0 -12 0 0 ]msf
249.727 11.7997 mo
(read probability)
[4.07999 6 5.76007 6.35992 2.39996 6.35992 3.95999 6.35992 6.35992 5.76004 6.35992 2.76004 
2.76007 2.76004 4.08008 0 ]xsh
gsave
50.4 166.2 mo
412.56 166.2 li
412.56 -9.00006 li
50.4 -9.00006 li
cp
clp
.75 lw
50.4 -9 mo
401.04 -9 li
401.04 162.36 li
50.4 162.36 li
cp
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.525 colr
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/AQWKJZ+Calibri*1 uf
/AQWKJZ+Calibri uf
/PBAAAA+Calibri uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
